/*
 * generated by Xtext 2.19.0
 */
grammar InternalDimacs;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.DimacsGrammarAccess;

}
@parser::members {
	private DimacsGrammarAccess grammarAccess;

	public void setGrammarAccess(DimacsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleCNF
entryRuleCNF
:
{ before(grammarAccess.getCNFRule()); }
	 ruleCNF
{ after(grammarAccess.getCNFRule()); } 
	 EOF 
;

// Rule CNF
ruleCNF 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCNFAccess().getGroup()); }
		(rule__CNF__Group__0)
		{ after(grammarAccess.getCNFAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommentaire
entryRuleCommentaire
:
{ before(grammarAccess.getCommentaireRule()); }
	 ruleCommentaire
{ after(grammarAccess.getCommentaireRule()); } 
	 EOF 
;

// Rule Commentaire
ruleCommentaire 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommentaireAccess().getGroup()); }
		(rule__Commentaire__Group__0)
		{ after(grammarAccess.getCommentaireAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLigneProbleme
entryRuleLigneProbleme
:
{ before(grammarAccess.getLigneProblemeRule()); }
	 ruleLigneProbleme
{ after(grammarAccess.getLigneProblemeRule()); } 
	 EOF 
;

// Rule LigneProbleme
ruleLigneProbleme 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLigneProblemeAccess().getGroup()); }
		(rule__LigneProbleme__Group__0)
		{ after(grammarAccess.getLigneProblemeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLigneClause
entryRuleLigneClause
:
{ before(grammarAccess.getLigneClauseRule()); }
	 ruleLigneClause
{ after(grammarAccess.getLigneClauseRule()); } 
	 EOF 
;

// Rule LigneClause
ruleLigneClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLigneClauseAccess().getGroup()); }
		(rule__LigneClause__Group__0)
		{ after(grammarAccess.getLigneClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulelitteral
entryRulelitteral
:
{ before(grammarAccess.getLitteralRule()); }
	 rulelitteral
{ after(grammarAccess.getLitteralRule()); } 
	 EOF 
;

// Rule litteral
rulelitteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLitteralAccess().getValAssignment()); }
		(rule__Litteral__ValAssignment)
		{ after(grammarAccess.getLitteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CNF__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CNF__Group__0__Impl
	rule__CNF__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CNF__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCNFAccess().getCommentsAssignment_0()); }
	(rule__CNF__CommentsAssignment_0)*
	{ after(grammarAccess.getCNFAccess().getCommentsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CNF__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CNF__Group__1__Impl
	rule__CNF__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CNF__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCNFAccess().getLineFeedKeyword_1()); }
	'\n'
	{ after(grammarAccess.getCNFAccess().getLineFeedKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CNF__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CNF__Group__2__Impl
	rule__CNF__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CNF__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCNFAccess().getProblemAssignment_2()); }
	(rule__CNF__ProblemAssignment_2)
	{ after(grammarAccess.getCNFAccess().getProblemAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CNF__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CNF__Group__3__Impl
	rule__CNF__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CNF__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCNFAccess().getLineFeedKeyword_3()); }
	'\n'
	{ after(grammarAccess.getCNFAccess().getLineFeedKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CNF__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CNF__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CNF__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCNFAccess().getClausesAssignment_4()); }
	(rule__CNF__ClausesAssignment_4)*
	{ after(grammarAccess.getCNFAccess().getClausesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Commentaire__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commentaire__Group__0__Impl
	rule__Commentaire__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commentaire__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommentaireAccess().getCKeyword_0()); }
	'c'
	{ after(grammarAccess.getCommentaireAccess().getCKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commentaire__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commentaire__Group__1__Impl
	rule__Commentaire__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Commentaire__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommentaireAccess().getContentAssignment_1()); }
	(rule__Commentaire__ContentAssignment_1)
	{ after(grammarAccess.getCommentaireAccess().getContentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commentaire__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commentaire__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commentaire__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommentaireAccess().getLineFeedKeyword_2()); }
	'\n'
	{ after(grammarAccess.getCommentaireAccess().getLineFeedKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LigneProbleme__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LigneProbleme__Group__0__Impl
	rule__LigneProbleme__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneProbleme__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneProblemeAccess().getPKeyword_0()); }
	'p'
	{ after(grammarAccess.getLigneProblemeAccess().getPKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneProbleme__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LigneProbleme__Group__1__Impl
	rule__LigneProbleme__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneProbleme__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneProblemeAccess().getCnfKeyword_1()); }
	'cnf'
	{ after(grammarAccess.getLigneProblemeAccess().getCnfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneProbleme__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LigneProbleme__Group__2__Impl
	rule__LigneProbleme__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneProbleme__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneProblemeAccess().getNb_variablesAssignment_2()); }
	(rule__LigneProbleme__Nb_variablesAssignment_2)
	{ after(grammarAccess.getLigneProblemeAccess().getNb_variablesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneProbleme__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LigneProbleme__Group__3__Impl
	rule__LigneProbleme__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneProbleme__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneProblemeAccess().getNb_clausesAssignment_3()); }
	(rule__LigneProbleme__Nb_clausesAssignment_3)
	{ after(grammarAccess.getLigneProblemeAccess().getNb_clausesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneProbleme__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LigneProbleme__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneProbleme__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneProblemeAccess().getLineFeedKeyword_4()); }
	'\n'
	{ after(grammarAccess.getLigneProblemeAccess().getLineFeedKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LigneClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LigneClause__Group__0__Impl
	rule__LigneClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getLigneClauseAccess().getLitterauxAssignment_0()); }
		(rule__LigneClause__LitterauxAssignment_0)
		{ after(grammarAccess.getLigneClauseAccess().getLitterauxAssignment_0()); }
	)
	(
		{ before(grammarAccess.getLigneClauseAccess().getLitterauxAssignment_0()); }
		(rule__LigneClause__LitterauxAssignment_0)*
		{ after(grammarAccess.getLigneClauseAccess().getLitterauxAssignment_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LigneClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneClauseAccess().getDigitZeroKeyword_1()); }
	'0'
	{ after(grammarAccess.getLigneClauseAccess().getDigitZeroKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CNF__CommentsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCNFAccess().getCommentsCommentaireParserRuleCall_0_0()); }
		ruleCommentaire
		{ after(grammarAccess.getCNFAccess().getCommentsCommentaireParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CNF__ProblemAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCNFAccess().getProblemLigneProblemeParserRuleCall_2_0()); }
		ruleLigneProbleme
		{ after(grammarAccess.getCNFAccess().getProblemLigneProblemeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CNF__ClausesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCNFAccess().getClausesLigneClauseParserRuleCall_4_0()); }
		ruleLigneClause
		{ after(grammarAccess.getCNFAccess().getClausesLigneClauseParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commentaire__ContentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommentaireAccess().getContentSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getCommentaireAccess().getContentSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneProbleme__Nb_variablesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLigneProblemeAccess().getNb_variablesINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getLigneProblemeAccess().getNb_variablesINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneProbleme__Nb_clausesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLigneProblemeAccess().getNb_clausesINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getLigneProblemeAccess().getNb_clausesINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneClause__LitterauxAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLigneClauseAccess().getLitterauxLitteralParserRuleCall_0_0()); }
		rulelitteral
		{ after(grammarAccess.getLigneClauseAccess().getLitterauxLitteralParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Litteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLitteralAccess().getValINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getLitteralAccess().getValINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
