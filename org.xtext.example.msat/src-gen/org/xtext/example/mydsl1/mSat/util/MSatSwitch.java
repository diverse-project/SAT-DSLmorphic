/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl1.mSat.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.mydsl1.mSat.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl1.mSat.MSatPackage
 * @generated
 */
public class MSatSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MSatPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MSatSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MSatPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MSatPackage.SAT_MORPHIC:
      {
        SATMorphic satMorphic = (SATMorphic)theEObject;
        T result = caseSATMorphic(satMorphic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MSatPackage.SAT_SOLVER:
      {
        SATSolver satSolver = (SATSolver)theEObject;
        T result = caseSATSolver(satSolver);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MSatPackage.SAT4_J:
      {
        Sat4J sat4J = (Sat4J)theEObject;
        T result = caseSat4J(sat4J);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MSatPackage.SOLVER_VERSION:
      {
        SolverVersion solverVersion = (SolverVersion)theEObject;
        T result = caseSolverVersion(solverVersion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MSatPackage.MINI_SAT:
      {
        MiniSAT miniSAT = (MiniSAT)theEObject;
        T result = caseMiniSAT(miniSAT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MSatPackage.CRYPTO_MINI_SAT:
      {
        CryptoMiniSAT cryptoMiniSAT = (CryptoMiniSAT)theEObject;
        T result = caseCryptoMiniSAT(cryptoMiniSAT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MSatPackage.MINI_SAT_PARAMETER:
      {
        MiniSATParameter miniSATParameter = (MiniSATParameter)theEObject;
        T result = caseMiniSATParameter(miniSATParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MSatPackage.BENCHMARK:
      {
        Benchmark benchmark = (Benchmark)theEObject;
        T result = caseBenchmark(benchmark);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MSatPackage.BENCHMARK_DIMACS:
      {
        BenchmarkDimacs benchmarkDimacs = (BenchmarkDimacs)theEObject;
        T result = caseBenchmarkDimacs(benchmarkDimacs);
        if (result == null) result = caseBenchmark(benchmarkDimacs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MSatPackage.BENCHMARK_FORMULA:
      {
        BenchmarkFormula benchmarkFormula = (BenchmarkFormula)theEObject;
        T result = caseBenchmarkFormula(benchmarkFormula);
        if (result == null) result = caseBenchmark(benchmarkFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MSatPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MSatPackage.BI_IMPL:
      {
        BiImpl biImpl = (BiImpl)theEObject;
        T result = caseBiImpl(biImpl);
        if (result == null) result = caseExpression(biImpl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MSatPackage.IMPL:
      {
        Impl impl = (Impl)theEObject;
        T result = caseImpl(impl);
        if (result == null) result = caseExpression(impl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MSatPackage.OR:
      {
        Or or = (Or)theEObject;
        T result = caseOr(or);
        if (result == null) result = caseExpression(or);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MSatPackage.AND:
      {
        And and = (And)theEObject;
        T result = caseAnd(and);
        if (result == null) result = caseExpression(and);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MSatPackage.NAND:
      {
        Nand nand = (Nand)theEObject;
        T result = caseNand(nand);
        if (result == null) result = caseExpression(nand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MSatPackage.NOT:
      {
        Not not = (Not)theEObject;
        T result = caseNot(not);
        if (result == null) result = caseExpression(not);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAT Morphic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAT Morphic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSATMorphic(SATMorphic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAT Solver</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAT Solver</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSATSolver(SATSolver object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sat4 J</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sat4 J</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSat4J(Sat4J object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Solver Version</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Solver Version</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSolverVersion(SolverVersion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mini SAT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mini SAT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMiniSAT(MiniSAT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Crypto Mini SAT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Crypto Mini SAT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCryptoMiniSAT(CryptoMiniSAT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mini SAT Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mini SAT Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMiniSATParameter(MiniSATParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Benchmark</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Benchmark</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBenchmark(Benchmark object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Benchmark Dimacs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Benchmark Dimacs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBenchmarkDimacs(BenchmarkDimacs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Benchmark Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Benchmark Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBenchmarkFormula(BenchmarkFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bi Impl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bi Impl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBiImpl(BiImpl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Impl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Impl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImpl(Impl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOr(Or object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnd(And object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Nand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Nand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNand(Nand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNot(Not object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MSatSwitch
