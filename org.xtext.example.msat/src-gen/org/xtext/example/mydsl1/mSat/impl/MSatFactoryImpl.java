/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl1.mSat.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl1.mSat.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MSatFactoryImpl extends EFactoryImpl implements MSatFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MSatFactory init()
  {
    try
    {
      MSatFactory theMSatFactory = (MSatFactory)EPackage.Registry.INSTANCE.getEFactory(MSatPackage.eNS_URI);
      if (theMSatFactory != null)
      {
        return theMSatFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MSatFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MSatFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MSatPackage.SAT_MORPHIC: return createSATMorphic();
      case MSatPackage.SAT_SOLVER: return createSATSolver();
      case MSatPackage.SAT4_J: return createSat4J();
      case MSatPackage.SOLVER_VERSION: return createSolverVersion();
      case MSatPackage.MINI_SAT: return createMiniSAT();
      case MSatPackage.CRYPTO_MINI_SAT: return createCryptoMiniSAT();
      case MSatPackage.MINI_SAT_PARAMETER: return createMiniSATParameter();
      case MSatPackage.BENCHMARK: return createBenchmark();
      case MSatPackage.BENCHMARK_DIMACS: return createBenchmarkDimacs();
      case MSatPackage.BENCHMARK_FORMULA: return createBenchmarkFormula();
      case MSatPackage.EXPRESSION: return createExpression();
      case MSatPackage.BI_IMPL: return createBiImpl();
      case MSatPackage.IMPL: return createImpl();
      case MSatPackage.OR: return createOr();
      case MSatPackage.AND: return createAnd();
      case MSatPackage.NAND: return createNand();
      case MSatPackage.NOT: return createNot();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MSatPackage.SAT4_JVARIANT:
        return createSat4JVariantFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MSatPackage.SAT4_JVARIANT:
        return convertSat4JVariantToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SATMorphic createSATMorphic()
  {
    SATMorphicImpl satMorphic = new SATMorphicImpl();
    return satMorphic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SATSolver createSATSolver()
  {
    SATSolverImpl satSolver = new SATSolverImpl();
    return satSolver;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sat4J createSat4J()
  {
    Sat4JImpl sat4J = new Sat4JImpl();
    return sat4J;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SolverVersion createSolverVersion()
  {
    SolverVersionImpl solverVersion = new SolverVersionImpl();
    return solverVersion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MiniSAT createMiniSAT()
  {
    MiniSATImpl miniSAT = new MiniSATImpl();
    return miniSAT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CryptoMiniSAT createCryptoMiniSAT()
  {
    CryptoMiniSATImpl cryptoMiniSAT = new CryptoMiniSATImpl();
    return cryptoMiniSAT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MiniSATParameter createMiniSATParameter()
  {
    MiniSATParameterImpl miniSATParameter = new MiniSATParameterImpl();
    return miniSATParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Benchmark createBenchmark()
  {
    BenchmarkImpl benchmark = new BenchmarkImpl();
    return benchmark;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BenchmarkDimacs createBenchmarkDimacs()
  {
    BenchmarkDimacsImpl benchmarkDimacs = new BenchmarkDimacsImpl();
    return benchmarkDimacs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BenchmarkFormula createBenchmarkFormula()
  {
    BenchmarkFormulaImpl benchmarkFormula = new BenchmarkFormulaImpl();
    return benchmarkFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BiImpl createBiImpl()
  {
    BiImplImpl biImpl = new BiImplImpl();
    return biImpl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Impl createImpl()
  {
    ImplImpl impl = new ImplImpl();
    return impl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Nand createNand()
  {
    NandImpl nand = new NandImpl();
    return nand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Sat4JVariant createSat4JVariantFromString(EDataType eDataType, String initialValue)
  {
    Sat4JVariant result = Sat4JVariant.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSat4JVariantToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MSatPackage getMSatPackage()
  {
    return (MSatPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MSatPackage getPackage()
  {
    return MSatPackage.eINSTANCE;
  }

} //MSatFactoryImpl
