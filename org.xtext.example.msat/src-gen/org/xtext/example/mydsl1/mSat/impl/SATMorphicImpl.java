/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl1.mSat.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl1.mSat.Benchmark;
import org.xtext.example.mydsl1.mSat.MSatPackage;
import org.xtext.example.mydsl1.mSat.SATMorphic;
import org.xtext.example.mydsl1.mSat.SATSolver;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>SAT Morphic</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl1.mSat.impl.SATMorphicImpl#getSolvers <em>Solvers</em>}</li>
 *   <li>{@link org.xtext.example.mydsl1.mSat.impl.SATMorphicImpl#getBenchmark <em>Benchmark</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SATMorphicImpl extends MinimalEObjectImpl.Container implements SATMorphic
{
  /**
   * The cached value of the '{@link #getSolvers() <em>Solvers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSolvers()
   * @generated
   * @ordered
   */
  protected EList<SATSolver> solvers;

  /**
   * The cached value of the '{@link #getBenchmark() <em>Benchmark</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBenchmark()
   * @generated
   * @ordered
   */
  protected Benchmark benchmark;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SATMorphicImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MSatPackage.Literals.SAT_MORPHIC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SATSolver> getSolvers()
  {
    if (solvers == null)
    {
      solvers = new EObjectContainmentEList<SATSolver>(SATSolver.class, this, MSatPackage.SAT_MORPHIC__SOLVERS);
    }
    return solvers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Benchmark getBenchmark()
  {
    return benchmark;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBenchmark(Benchmark newBenchmark, NotificationChain msgs)
  {
    Benchmark oldBenchmark = benchmark;
    benchmark = newBenchmark;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MSatPackage.SAT_MORPHIC__BENCHMARK, oldBenchmark, newBenchmark);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBenchmark(Benchmark newBenchmark)
  {
    if (newBenchmark != benchmark)
    {
      NotificationChain msgs = null;
      if (benchmark != null)
        msgs = ((InternalEObject)benchmark).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MSatPackage.SAT_MORPHIC__BENCHMARK, null, msgs);
      if (newBenchmark != null)
        msgs = ((InternalEObject)newBenchmark).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MSatPackage.SAT_MORPHIC__BENCHMARK, null, msgs);
      msgs = basicSetBenchmark(newBenchmark, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MSatPackage.SAT_MORPHIC__BENCHMARK, newBenchmark, newBenchmark));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MSatPackage.SAT_MORPHIC__SOLVERS:
        return ((InternalEList<?>)getSolvers()).basicRemove(otherEnd, msgs);
      case MSatPackage.SAT_MORPHIC__BENCHMARK:
        return basicSetBenchmark(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MSatPackage.SAT_MORPHIC__SOLVERS:
        return getSolvers();
      case MSatPackage.SAT_MORPHIC__BENCHMARK:
        return getBenchmark();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MSatPackage.SAT_MORPHIC__SOLVERS:
        getSolvers().clear();
        getSolvers().addAll((Collection<? extends SATSolver>)newValue);
        return;
      case MSatPackage.SAT_MORPHIC__BENCHMARK:
        setBenchmark((Benchmark)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MSatPackage.SAT_MORPHIC__SOLVERS:
        getSolvers().clear();
        return;
      case MSatPackage.SAT_MORPHIC__BENCHMARK:
        setBenchmark((Benchmark)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MSatPackage.SAT_MORPHIC__SOLVERS:
        return solvers != null && !solvers.isEmpty();
      case MSatPackage.SAT_MORPHIC__BENCHMARK:
        return benchmark != null;
    }
    return super.eIsSet(featureID);
  }

} //SATMorphicImpl
