/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl1.mSat.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl1.mSat.MSatPackage;
import org.xtext.example.mydsl1.mSat.SATSolver;
import org.xtext.example.mydsl1.mSat.SolverVersion;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>SAT Solver</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl1.mSat.impl.SATSolverImpl#getSolver <em>Solver</em>}</li>
 *   <li>{@link org.xtext.example.mydsl1.mSat.impl.SATSolverImpl#getVersion <em>Version</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SATSolverImpl extends MinimalEObjectImpl.Container implements SATSolver
{
  /**
   * The cached value of the '{@link #getSolver() <em>Solver</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSolver()
   * @generated
   * @ordered
   */
  protected EObject solver;

  /**
   * The cached value of the '{@link #getVersion() <em>Version</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected SolverVersion version;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SATSolverImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MSatPackage.Literals.SAT_SOLVER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getSolver()
  {
    return solver;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSolver(EObject newSolver, NotificationChain msgs)
  {
    EObject oldSolver = solver;
    solver = newSolver;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MSatPackage.SAT_SOLVER__SOLVER, oldSolver, newSolver);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSolver(EObject newSolver)
  {
    if (newSolver != solver)
    {
      NotificationChain msgs = null;
      if (solver != null)
        msgs = ((InternalEObject)solver).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MSatPackage.SAT_SOLVER__SOLVER, null, msgs);
      if (newSolver != null)
        msgs = ((InternalEObject)newSolver).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MSatPackage.SAT_SOLVER__SOLVER, null, msgs);
      msgs = basicSetSolver(newSolver, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MSatPackage.SAT_SOLVER__SOLVER, newSolver, newSolver));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SolverVersion getVersion()
  {
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVersion(SolverVersion newVersion, NotificationChain msgs)
  {
    SolverVersion oldVersion = version;
    version = newVersion;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MSatPackage.SAT_SOLVER__VERSION, oldVersion, newVersion);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVersion(SolverVersion newVersion)
  {
    if (newVersion != version)
    {
      NotificationChain msgs = null;
      if (version != null)
        msgs = ((InternalEObject)version).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MSatPackage.SAT_SOLVER__VERSION, null, msgs);
      if (newVersion != null)
        msgs = ((InternalEObject)newVersion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MSatPackage.SAT_SOLVER__VERSION, null, msgs);
      msgs = basicSetVersion(newVersion, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MSatPackage.SAT_SOLVER__VERSION, newVersion, newVersion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MSatPackage.SAT_SOLVER__SOLVER:
        return basicSetSolver(null, msgs);
      case MSatPackage.SAT_SOLVER__VERSION:
        return basicSetVersion(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MSatPackage.SAT_SOLVER__SOLVER:
        return getSolver();
      case MSatPackage.SAT_SOLVER__VERSION:
        return getVersion();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MSatPackage.SAT_SOLVER__SOLVER:
        setSolver((EObject)newValue);
        return;
      case MSatPackage.SAT_SOLVER__VERSION:
        setVersion((SolverVersion)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MSatPackage.SAT_SOLVER__SOLVER:
        setSolver((EObject)null);
        return;
      case MSatPackage.SAT_SOLVER__VERSION:
        setVersion((SolverVersion)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MSatPackage.SAT_SOLVER__SOLVER:
        return solver != null;
      case MSatPackage.SAT_SOLVER__VERSION:
        return version != null;
    }
    return super.eIsSet(featureID);
  }

} //SATSolverImpl
