package org.xtext.example.mydsl.tests;

import java.io.File;
import java.io.FileWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Exceptions;

@SuppressWarnings("all")
public class Method3 {
  public static void DoIt(final String file_dimacs_formula) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("../SatSatSat.core/");
      _builder.append(file_dimacs_formula);
      Files.copy(Paths.get(file_dimacs_formula), 
        Paths.get(_builder.toString()), 
        StandardCopyOption.REPLACE_EXISTING);
      final String generated_file_name = "../SatSatSat.core/src/main/java/SatSatSat/SatSatSat/core/App.java";
      File _file = new File(generated_file_name);
      final FileWriter fileWriter = new FileWriter(_file);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("package SatSatSat.SatSatSat.core;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("import java.io.FileNotFoundException;");
      _builder_1.newLine();
      _builder_1.append("import java.io.IOException;");
      _builder_1.newLine();
      _builder_1.append("import java.io.PrintWriter;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("import org.sat4j.minisat.SolverFactory;");
      _builder_1.newLine();
      _builder_1.append("import org.sat4j.reader.DimacsReader;");
      _builder_1.newLine();
      _builder_1.append("import org.sat4j.reader.ParseFormatException;");
      _builder_1.newLine();
      _builder_1.append("import org.sat4j.reader.Reader;");
      _builder_1.newLine();
      _builder_1.append("import org.sat4j.specs.ContradictionException;");
      _builder_1.newLine();
      _builder_1.append("import org.sat4j.specs.IProblem;");
      _builder_1.newLine();
      _builder_1.append("import org.sat4j.specs.ISolver;");
      _builder_1.newLine();
      _builder_1.append("import org.sat4j.specs.TimeoutException;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("public class App");
      _builder_1.newLine();
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("public static void main( String[] args )");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("System.out.println(\"heyo?\");");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("// SAT! SAT! SAT!");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("ISolver solver = SolverFactory.newDefault();");
      _builder_1.newLine();
      _builder_1.append("\t        ");
      _builder_1.append("solver.setTimeout(3600); // 1 hour timeout");
      _builder_1.newLine();
      _builder_1.append("\t        ");
      _builder_1.append("Reader reader = new DimacsReader(solver);");
      _builder_1.newLine();
      _builder_1.append("\t        ");
      _builder_1.append("PrintWriter out = new PrintWriter(System.out,true);");
      _builder_1.newLine();
      _builder_1.append("\t        ");
      _builder_1.append("try {");
      _builder_1.newLine();
      _builder_1.append("\t            ");
      _builder_1.append("IProblem problem = reader.parseInstance(\"");
      _builder_1.append(file_dimacs_formula, "\t            ");
      _builder_1.append("\");");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("\t            ");
      _builder_1.append("if (problem.isSatisfiable()) {");
      _builder_1.newLine();
      _builder_1.append("\t                ");
      _builder_1.append("System.out.println(\"Satisfiable !\");");
      _builder_1.newLine();
      _builder_1.append("\t                ");
      _builder_1.append("reader.decode(problem.model(),out);");
      _builder_1.newLine();
      _builder_1.append("\t            ");
      _builder_1.append("} else {");
      _builder_1.newLine();
      _builder_1.append("\t                ");
      _builder_1.append("System.out.println(\"Unsatisfiable !\");");
      _builder_1.newLine();
      _builder_1.append("\t            ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t            ");
      _builder_1.append("System.out.println(\"ok\");");
      _builder_1.newLine();
      _builder_1.append("\t        ");
      _builder_1.append("} catch (FileNotFoundException e) {");
      _builder_1.newLine();
      _builder_1.append("\t        \t");
      _builder_1.append("System.out.println(\"file not found\");");
      _builder_1.newLine();
      _builder_1.append("\t        ");
      _builder_1.append("} catch (ParseFormatException e) {");
      _builder_1.newLine();
      _builder_1.append("\t        \t");
      _builder_1.append("System.out.println(\"ParseFormatException\");");
      _builder_1.newLine();
      _builder_1.append("\t        ");
      _builder_1.append("} catch (IOException e) {");
      _builder_1.newLine();
      _builder_1.append("\t        \t");
      _builder_1.append("System.out.println(\"IOExcpetion\");");
      _builder_1.newLine();
      _builder_1.append("\t        ");
      _builder_1.append("} catch (ContradictionException e) {");
      _builder_1.newLine();
      _builder_1.append("\t            ");
      _builder_1.append("System.out.println(\"Unsatisfiable (trivial)!\");");
      _builder_1.newLine();
      _builder_1.append("\t        ");
      _builder_1.append("} catch (TimeoutException e) {");
      _builder_1.newLine();
      _builder_1.append("\t            ");
      _builder_1.append("System.out.println(\"Timeout, sorry!\");");
      _builder_1.newLine();
      _builder_1.append("\t        ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t        ");
      _builder_1.newLine();
      _builder_1.append("\t        ");
      _builder_1.newLine();
      _builder_1.append("\t        ");
      _builder_1.append("System.out.println(\"fini\");");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      fileWriter.write(_builder_1.toString());
      fileWriter.close();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
