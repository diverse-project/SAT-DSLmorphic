/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.tests.theos

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.mydsl.generator.SatGenerator
import org.xtext.example.mydsl.sat.Expression
import org.xtext.example.mydsl.tests.SatInjectorProvider

@ExtendWith(InjectionExtension)
@InjectWith(SatInjectorProvider)
class SatParsingTest {
	@Inject
	ParseHelper<Expression> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			A v B => C
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		println("model=" + result)
	}
	
	@Test
	def void testModelTransformation1() {
		val ast = parseHelper.parse('''
			A v B
		''')
		Assertions.assertNotNull(ast)
		val errors = ast.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		val dimacs = SatGenerator.prop_to_dimacs(ast)
		
		print("Test 1:\n" + dimacs + "\n\n")
		Assertions.assertTrue(dimacs.equals("p cnf 2 1\n1 2 0"))
	}
	
	@Test
	def void testModelTransformation2() {
		val ast = parseHelper.parse('''
			(a v b v c) ^ ((!a v c) ^ (!b)) ^ ((d v g v e v q v a v !f) ^ a)
		''')
		Assertions.assertNotNull(ast)
		val errors = ast.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		val dimacs = SatGenerator.prop_to_dimacs(ast)
		
		print("Test 2:\n" + dimacs + "\n\n")
		Assertions.assertTrue(dimacs.equals("p cnf 8 5\n1 2 3 0\n-1 3 0\n-2 0\n4 5 6 7 1 -8 0\n1 0"))
	}
	
	@Test
	def void testModelTransformation3() {
		val ast = parseHelper.parse('''
			a ^ (a ^ a) ^ a ^ (a v a)
		''')
		Assertions.assertNotNull(ast)
		val errors = ast.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		val dimacs = SatGenerator.prop_to_dimacs(ast)
		
		print("Test 2:\n" + dimacs + "\n\n")
		Assertions.assertTrue(dimacs.equals("p cnf 1 5\n1 0\n1 0\n1 0\n1 0\n1 1 0"))
	}
	
	@Test
	def void testModelTransformation4() {
		val ast = parseHelper.parse('''
			(d v e) ^ (t v o v u v t v e) ^ (f v a v c v o v n)
			^ (l v e v s) ^ (e v n v s v e v i v g v n v a v n v t)
			^ (n v e) ^ (l v i v r v o v n v s) ^ (p v a v s) ^ (l v e v s)
			^ (t v e v s v t v s)
		''')
		Assertions.assertNotNull(ast)
		val errors = ast.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		val dimacs = SatGenerator.prop_to_dimacs(ast)
		
		print("Test 3:\n" + dimacs + "\n\n")
		Assertions.assertTrue(dimacs.equals(
"p cnf 15 10\n1 2 0\n3 4 5 3 2 0\n6 7 8 4 9 0\n10 2 11 0\n2 9 11 2 12 13 9 7 9 3 0\n9 2 0\n10 12 14 4 9 11 0\n15 7 11 0\n10 2 11 0\n3 2 11 3 11 0"
		))
	}
}
