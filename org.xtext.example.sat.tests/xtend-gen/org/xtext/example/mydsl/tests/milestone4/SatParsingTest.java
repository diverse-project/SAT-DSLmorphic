/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.tests.milestone4;

import com.google.inject.Inject;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.sat4j.minisat.SolverFactory;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.Reader;
import org.sat4j.specs.IProblem;
import org.sat4j.specs.ISolver;
import org.xtext.example.mydsl.sat.And;
import org.xtext.example.mydsl.sat.BiImpl;
import org.xtext.example.mydsl.sat.DimacsFile;
import org.xtext.example.mydsl.sat.Expression;
import org.xtext.example.mydsl.sat.Impl;
import org.xtext.example.mydsl.sat.Model;
import org.xtext.example.mydsl.sat.Nand;
import org.xtext.example.mydsl.sat.Not;
import org.xtext.example.mydsl.sat.Or;
import org.xtext.example.mydsl.sat.SATSolverMethod;
import org.xtext.example.mydsl.sat.Sat;
import org.xtext.example.mydsl.tests.SatInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(SatInjectorProvider.class)
@SuppressWarnings("all")
public class SatParsingTest {
  @Inject
  private ParseHelper<Sat> parseHelper;
  
  @Test
  public void main() {
    try {
      String inputFileName = "test.sat";
      String outputDimacsFileName = "test.cnf";
      byte[] _readAllBytes = Files.readAllBytes(Paths.get(inputFileName));
      String content = new String(_readAllBytes);
      Sat sat = this.parseHelper.parse(content);
      String dimacs = null;
      EObject _type = sat.getType();
      if ((_type instanceof Model)) {
        EObject _type_1 = sat.getType();
        dimacs = this.getDIMACSFromInlineFormula(((Model) _type_1));
      } else {
        EObject _type_2 = sat.getType();
        if ((_type_2 instanceof DimacsFile)) {
          EObject _type_3 = sat.getType();
          dimacs = this.getDIMACSFromFile(((DimacsFile) _type_3));
        }
      }
      InputOutput.<String>println(dimacs);
      File _file = new File(outputDimacsFileName);
      FileWriter writer = new FileWriter(_file);
      writer.write(dimacs);
      writer.close();
      SATSolverMethod solverMethod = sat.getSolver_method();
      if (solverMethod != null) {
        switch (solverMethod) {
          case SAT4J_JAVA:
            ISolver solver = SolverFactory.newDefault();
            solver.setTimeout(3600);
            Reader reader = new DimacsReader(solver);
            PrintWriter out = new PrintWriter(System.out, true);
            try {
              IProblem problem = reader.parseInstance(outputDimacsFileName);
              boolean _isSatisfiable = problem.isSatisfiable();
              if (_isSatisfiable) {
                System.out.println("Satisfiable !");
                reader.decode(problem.model(), out);
              } else {
                System.out.println("Unsatisfiable !");
              }
            } catch (final Throwable _t) {
              if (_t instanceof Exception) {
                System.out.println("Oops!");
              } else {
                throw Exceptions.sneakyThrow(_t);
              }
            }
            out.close();
            break;
          case SAT4J_JAR:
            Process p = Runtime.getRuntime().exec(("java -jar org.sat4j.core.jar " + outputDimacsFileName));
            InputStream _inputStream = p.getInputStream();
            InputStreamReader _inputStreamReader = new InputStreamReader(_inputStream);
            BufferedReader stdInput = new BufferedReader(_inputStreamReader);
            String s = null;
            while (((s = stdInput.readLine()) != null)) {
              System.out.println(s);
            }
            break;
          case SAT4J_MAVEN:
            break;
          default:
            break;
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public String getDIMACSFromInlineFormula(final Model model) {
    Expression ast = model.getModel();
    this.prettyPrint(ast);
    InputOutput.println();
    HashMap<String, Integer> literal_ids = new HashMap<String, Integer>();
    this.parse_cnf_literals(ast, literal_ids);
    return this.toDIMACS(ast, literal_ids);
  }
  
  public String getDIMACSFromFile(final DimacsFile file) {
    try {
      byte[] _readAllBytes = Files.readAllBytes(Paths.get(file.getFilepath()));
      return new String(_readAllBytes);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public Object parse_cnf_literals(final Expression e, final HashMap<String, Integer> literal_ids) {
    Object _xifexpression = null;
    String _id = e.getId();
    boolean _tripleNotEquals = (_id != null);
    if (_tripleNotEquals) {
      Integer _xifexpression_1 = null;
      boolean _containsKey = literal_ids.containsKey(e.getId());
      boolean _not = (!_containsKey);
      if (_not) {
        String _id_1 = e.getId();
        int _size = literal_ids.size();
        int _plus = (_size + 1);
        _xifexpression_1 = literal_ids.put(_id_1, Integer.valueOf(_plus));
      }
      _xifexpression = _xifexpression_1;
    } else {
      Object _xifexpression_2 = null;
      if ((e instanceof And)) {
        Object _xblockexpression = null;
        {
          this.parse_cnf_literals(((And)e).getLeft(), literal_ids);
          _xblockexpression = this.parse_cnf_literals(((And)e).getRight(), literal_ids);
        }
        _xifexpression_2 = _xblockexpression;
      } else {
        Object _xifexpression_3 = null;
        if ((e instanceof Not)) {
          _xifexpression_3 = this.parse_cnf_literals(((Not)e).getExpression(), literal_ids);
        } else {
          Object _xifexpression_4 = null;
          if ((e instanceof Or)) {
            Object _xblockexpression_1 = null;
            {
              this.parse_cnf_literals(((Or)e).getLeft(), literal_ids);
              _xblockexpression_1 = this.parse_cnf_literals(((Or)e).getRight(), literal_ids);
            }
            _xifexpression_4 = _xblockexpression_1;
          }
          _xifexpression_3 = _xifexpression_4;
        }
        _xifexpression_2 = _xifexpression_3;
      }
      _xifexpression = _xifexpression_2;
    }
    return _xifexpression;
  }
  
  public int count_cnf_clause(final Expression e) {
    Expression current = e;
    int count = 1;
    while ((current instanceof And)) {
      {
        count++;
        current = ((And)current).getLeft();
      }
    }
    return count;
  }
  
  public Object cnfToDIMACS(final Expression e, final HashMap<String, Integer> literal_ids) {
    if ((e instanceof Or)) {
      Object _cnfToDIMACS = this.cnfToDIMACS(((Or)e).getLeft(), literal_ids);
      String _plus = (_cnfToDIMACS + " ");
      Object _cnfToDIMACS_1 = this.cnfToDIMACS(((Or)e).getRight(), literal_ids);
      return (_plus + _cnfToDIMACS_1);
    } else {
      if ((e instanceof And)) {
        Object _cnfToDIMACS_2 = this.cnfToDIMACS(((And)e).getRight(), literal_ids);
        String _plus_1 = (_cnfToDIMACS_2 + " 0\n");
        Object _cnfToDIMACS_3 = this.cnfToDIMACS(((And)e).getLeft(), literal_ids);
        return (_plus_1 + _cnfToDIMACS_3);
      } else {
        if ((e instanceof Not)) {
          Integer _get = literal_ids.get(((Not)e).getExpression().getId());
          return ("-" + _get);
        } else {
          String _id = e.getId();
          boolean _tripleNotEquals = (_id != null);
          if (_tripleNotEquals) {
            return literal_ids.get(e.getId());
          }
        }
      }
    }
    return null;
  }
  
  public String toDIMACS(final Expression e, final HashMap<String, Integer> literal_ids) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("p cnf ");
    int _size = literal_ids.size();
    _builder.append(_size);
    _builder.append(" ");
    int _count_cnf_clause = this.count_cnf_clause(e);
    _builder.append(_count_cnf_clause);
    _builder.newLineIfNotEmpty();
    Object _cnfToDIMACS = this.cnfToDIMACS(e, literal_ids);
    _builder.append(_cnfToDIMACS);
    _builder.append(" 0");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String prettyPrint(final And e) {
    String _xblockexpression = null;
    {
      InputOutput.<String>print("(");
      this.prettyPrint(e.getLeft());
      InputOutput.<String>print(" ^ ");
      this.prettyPrint(e.getRight());
      _xblockexpression = InputOutput.<String>print(")");
    }
    return _xblockexpression;
  }
  
  public String prettyPrint(final BiImpl e) {
    String _xblockexpression = null;
    {
      InputOutput.<String>print("(");
      this.prettyPrint(e.getLeft());
      InputOutput.<String>print(" <=> ");
      this.prettyPrint(e.getRight());
      _xblockexpression = InputOutput.<String>print(")");
    }
    return _xblockexpression;
  }
  
  public String prettyPrint(final Impl e) {
    String _xblockexpression = null;
    {
      InputOutput.<String>print("(");
      this.prettyPrint(e.getLeft());
      InputOutput.<String>print(" => ");
      this.prettyPrint(e.getRight());
      _xblockexpression = InputOutput.<String>print(")");
    }
    return _xblockexpression;
  }
  
  public String prettyPrint(final Nand e) {
    String _xblockexpression = null;
    {
      InputOutput.<String>print("(");
      this.prettyPrint(e.getLeft());
      InputOutput.<String>print(" | ");
      this.prettyPrint(e.getRight());
      _xblockexpression = InputOutput.<String>print(")");
    }
    return _xblockexpression;
  }
  
  public Object prettyPrint(final Not e) {
    Object _xblockexpression = null;
    {
      InputOutput.<String>print("~");
      _xblockexpression = this.prettyPrint(e.getExpression());
    }
    return _xblockexpression;
  }
  
  public String prettyPrint(final Or e) {
    String _xblockexpression = null;
    {
      InputOutput.<String>print("(");
      this.prettyPrint(e.getLeft());
      InputOutput.<String>print(" v ");
      this.prettyPrint(e.getRight());
      _xblockexpression = InputOutput.<String>print(")");
    }
    return _xblockexpression;
  }
  
  public Object prettyPrint(final Expression e) {
    Object _xifexpression = null;
    if ((e instanceof And)) {
      _xifexpression = this.prettyPrint(((And) e));
    } else {
      Object _xifexpression_1 = null;
      if ((e instanceof BiImpl)) {
        _xifexpression_1 = this.prettyPrint(((BiImpl) e));
      } else {
        Object _xifexpression_2 = null;
        if ((e instanceof Impl)) {
          _xifexpression_2 = this.prettyPrint(((Impl) e));
        } else {
          Object _xifexpression_3 = null;
          if ((e instanceof Nand)) {
            _xifexpression_3 = this.prettyPrint(((Nand) e));
          } else {
            Object _xifexpression_4 = null;
            if ((e instanceof Not)) {
              _xifexpression_4 = this.prettyPrint(((Not) e));
            } else {
              String _xifexpression_5 = null;
              if ((e instanceof Or)) {
                _xifexpression_5 = this.prettyPrint(((Or) e));
              } else {
                String _xifexpression_6 = null;
                String _id = e.getId();
                boolean _tripleNotEquals = (_id != null);
                if (_tripleNotEquals) {
                  _xifexpression_6 = InputOutput.<String>print(e.getId());
                }
                _xifexpression_5 = _xifexpression_6;
              }
              _xifexpression_4 = _xifexpression_5;
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("A v B => C");
      _builder.newLine();
      final Sat result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      InputOutput.<String>println(("model=" + result));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
