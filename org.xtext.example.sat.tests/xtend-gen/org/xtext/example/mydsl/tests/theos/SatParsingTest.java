/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.tests.theos;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.mydsl.generator.SatGenerator;
import org.xtext.example.mydsl.sat.Expression;
import org.xtext.example.mydsl.tests.SatInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(SatInjectorProvider.class)
@SuppressWarnings("all")
public class SatParsingTest {
  @Inject
  private ParseHelper<Expression> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("A v B => C");
      _builder.newLine();
      final Expression result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      InputOutput.<String>println(("model=" + result));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testModelTransformation1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("A v B");
      _builder.newLine();
      final Expression ast = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(ast);
      final EList<Resource.Diagnostic> errors = ast.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final String dimacs = SatGenerator.prop_to_dimacs(ast);
      InputOutput.<String>print((("Test 1:\n" + dimacs) + "\n\n"));
      Assertions.assertTrue(dimacs.equals("p cnf 2 1\n1 2 0"));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testModelTransformation2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(a v b v c) ^ ((!a v c) ^ (!b)) ^ ((d v g v e v q v a v !f) ^ a)");
      _builder.newLine();
      final Expression ast = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(ast);
      final EList<Resource.Diagnostic> errors = ast.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final String dimacs = SatGenerator.prop_to_dimacs(ast);
      InputOutput.<String>print((("Test 2:\n" + dimacs) + "\n\n"));
      Assertions.assertTrue(dimacs.equals("p cnf 8 5\n1 2 3 0\n-1 3 0\n-2 0\n4 5 6 7 1 -8 0\n1 0"));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testModelTransformation3() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("a ^ (a ^ a) ^ a ^ (a v a)");
      _builder.newLine();
      final Expression ast = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(ast);
      final EList<Resource.Diagnostic> errors = ast.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final String dimacs = SatGenerator.prop_to_dimacs(ast);
      InputOutput.<String>print((("Test 2:\n" + dimacs) + "\n\n"));
      Assertions.assertTrue(dimacs.equals("p cnf 1 5\n1 0\n1 0\n1 0\n1 0\n1 1 0"));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testModelTransformation4() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(d v e) ^ (t v o v u v t v e) ^ (f v a v c v o v n)");
      _builder.newLine();
      _builder.append("^ (l v e v s) ^ (e v n v s v e v i v g v n v a v n v t)");
      _builder.newLine();
      _builder.append("^ (n v e) ^ (l v i v r v o v n v s) ^ (p v a v s) ^ (l v e v s)");
      _builder.newLine();
      _builder.append("^ (t v e v s v t v s)");
      _builder.newLine();
      final Expression ast = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(ast);
      final EList<Resource.Diagnostic> errors = ast.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final String dimacs = SatGenerator.prop_to_dimacs(ast);
      InputOutput.<String>print((("Test 3:\n" + dimacs) + "\n\n"));
      Assertions.assertTrue(
        dimacs.equals(
          "p cnf 15 10\n1 2 0\n3 4 5 3 2 0\n6 7 8 4 9 0\n10 2 11 0\n2 9 11 2 12 13 9 7 9 3 0\n9 2 0\n10 12 14 4 9 11 0\n15 7 11 0\n10 2 11 0\n3 2 11 3 11 0"));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
