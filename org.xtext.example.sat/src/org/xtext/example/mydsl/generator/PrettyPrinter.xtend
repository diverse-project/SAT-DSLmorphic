/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.generator

import org.xtext.example.mydsl.sat.And
import org.xtext.example.mydsl.sat.BiImpl
import org.xtext.example.mydsl.sat.Expression
import org.xtext.example.mydsl.sat.Impl
import org.xtext.example.mydsl.sat.Nand
import org.xtext.example.mydsl.sat.Not
import org.xtext.example.mydsl.sat.Or

class PrettyPrinter {

	 static def String PrettyPrint(Expression e) {
	 	
		switch e {
			case e instanceof BiImpl : 
				return PrettyPrint( (e as BiImpl).getLeft) + " <=> " + PrettyPrint( (e as BiImpl).getRight)
				
			case e instanceof Impl : 
				return PrettyPrint( (e as Impl).getLeft) + " => " + PrettyPrint( (e as Impl).getRight)
				
			case e instanceof Or : 
				return PrettyPrint( (e as Or).getLeft) + " v " + PrettyPrint( (e as Or).getRight)
				
			case e instanceof And : 
				return PrettyPrint( (e as And).getLeft) + " ^ " + PrettyPrint( (e as And).getRight)
				
			case e instanceof Nand : 
				return PrettyPrint( (e as Nand).getLeft) + " â†‘ " + PrettyPrint( (e as Nand).getRight)
				
			case e instanceof Not :
				return " ! " + PrettyPrint( (e as Not).getExpression)
			
			default : if (e.getId() === null) e.getVal.toString else e.getId.toString
				
				
			
			
			
		}

		

	}
}
