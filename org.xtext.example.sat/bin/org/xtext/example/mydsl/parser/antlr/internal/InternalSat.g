/*
 * generated by Xtext 2.19.0
 */
grammar InternalSat;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.SatGrammarAccess;

}

@parser::members {

 	private SatGrammarAccess grammarAccess;

    public InternalSatParser(TokenStream input, SatGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Sat";
   	}

   	@Override
   	protected SatGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSat
entryRuleSat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSatRule()); }
	iv_ruleSat=ruleSat
	{ $current=$iv_ruleSat.current; }
	EOF;

// Rule Sat
ruleSat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSatAccess().getTypeDimacsFileParserRuleCall_0_0_0());
					}
					lv_type_0_1=ruleDimacsFile
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSatRule());
						}
						set(
							$current,
							"type",
							lv_type_0_1,
							"org.xtext.example.mydsl.Sat.DimacsFile");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSatAccess().getTypeInlineFormulaParserRuleCall_0_0_1());
					}
					lv_type_0_2=ruleInlineFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSatRule());
						}
						set(
							$current,
							"type",
							lv_type_0_2,
							"org.xtext.example.mydsl.Sat.InlineFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSatAccess().getSolver_methodSATSolverMethodEnumRuleCall_1_0());
				}
				lv_solver_method_1_0=ruleSATSolverMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSatRule());
					}
					set(
						$current,
						"solver_method",
						lv_solver_method_1_0,
						"org.xtext.example.mydsl.Sat.SATSolverMethod");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDimacsFile
entryRuleDimacsFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDimacsFileRule()); }
	iv_ruleDimacsFile=ruleDimacsFile
	{ $current=$iv_ruleDimacsFile.current; }
	EOF;

// Rule DimacsFile
ruleDimacsFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='#dimacs'
		{
			newLeafNode(otherlv_0, grammarAccess.getDimacsFileAccess().getDimacsKeyword_0());
		}
		(
			(
				lv_filepath_1_0=RULE_STRING
				{
					newLeafNode(lv_filepath_1_0, grammarAccess.getDimacsFileAccess().getFilepathSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDimacsFileRule());
					}
					setWithLastConsumed(
						$current,
						"filepath",
						lv_filepath_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleInlineFormula
entryRuleInlineFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInlineFormulaRule()); }
	iv_ruleInlineFormula=ruleInlineFormula
	{ $current=$iv_ruleInlineFormula.current; }
	EOF;

// Rule InlineFormula
ruleInlineFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='#inline-formula'
		{
			newLeafNode(otherlv_0, grammarAccess.getInlineFormulaAccess().getInlineFormulaKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInlineFormulaAccess().getModelModelParserRuleCall_1_0());
				}
				lv_model_1_0=ruleModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInlineFormulaRule());
					}
					set(
						$current,
						"model",
						lv_model_1_0,
						"org.xtext.example.mydsl.Sat.Model");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getModelAccess().getBiImplParserRuleCall());
	}
	this_BiImpl_0=ruleBiImpl
	{
		$current = $this_BiImpl_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleBiImpl
entryRuleBiImpl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBiImplRule()); }
	iv_ruleBiImpl=ruleBiImpl
	{ $current=$iv_ruleBiImpl.current; }
	EOF;

// Rule BiImpl
ruleBiImpl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBiImplAccess().getImplParserRuleCall_0());
		}
		this_Impl_0=ruleImpl
		{
			$current = $this_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBiImplAccess().getBiImplLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='<=>'
			{
				newLeafNode(otherlv_2, grammarAccess.getBiImplAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBiImplAccess().getRightImplParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleImpl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBiImplRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Sat.Impl");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleImpl
entryRuleImpl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImplRule()); }
	iv_ruleImpl=ruleImpl
	{ $current=$iv_ruleImpl.current; }
	EOF;

// Rule Impl
ruleImpl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getImplAccess().getOrParserRuleCall_0());
		}
		this_Or_0=ruleOr
		{
			$current = $this_Or_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getImplAccess().getImplLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='=>'
			{
				newLeafNode(otherlv_2, grammarAccess.getImplAccess().getEqualsSignGreaterThanSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImplAccess().getRightOrParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImplRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Sat.Or");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='v'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Sat.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getNandParserRuleCall_0());
		}
		this_Nand_0=ruleNand
		{
			$current = $this_Nand_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='^'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndAccess().getCircumflexAccentKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRightNandParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleNand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Sat.Nand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNand
entryRuleNand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNandRule()); }
	iv_ruleNand=ruleNand
	{ $current=$iv_ruleNand.current; }
	EOF;

// Rule Nand
ruleNand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNandAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getNandAccess().getNandLeftAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='|'
				{
					newLeafNode(otherlv_2, grammarAccess.getNandAccess().getVerticalLineKeyword_1_1_0());
				}
				    |
				otherlv_3='\u2191'
				{
					newLeafNode(otherlv_3, grammarAccess.getNandAccess().getUpwardsArrowKeyword_1_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNandAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_4_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNandRule());
						}
						set(
							$current,
							"right",
							lv_right_4_0,
							"org.xtext.example.mydsl.Sat.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getModelParserRuleCall_0_1());
			}
			this_Model_1=ruleModel
			{
				$current = $this_Model_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getNotParserRuleCall_1());
		}
		this_Not_3=ruleNot
		{
			$current = $this_Not_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getConstParserRuleCall_2());
		}
		this_Const_4=ruleConst
		{
			$current = $this_Const_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getVarParserRuleCall_3());
		}
		this_Var_5=ruleVar
		{
			$current = $this_Var_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNot
entryRuleNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotRule()); }
	iv_ruleNot=ruleNot
	{ $current=$iv_ruleNot.current; }
	EOF;

// Rule Not
ruleNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='!'
			{
				newLeafNode(otherlv_0, grammarAccess.getNotAccess().getExclamationMarkKeyword_0_0());
			}
			    |
			otherlv_1='~'
			{
				newLeafNode(otherlv_1, grammarAccess.getNotAccess().getTildeKeyword_0_1());
			}
		)
		{
			newCompositeNode(grammarAccess.getNotAccess().getPrimaryParserRuleCall_1());
		}
		this_Primary_2=rulePrimary
		{
			$current = $this_Primary_2.current;
			afterParserOrEnumRuleCall();
		}
		(
			{
				$current = forceCreateModelElementAndSet(
					grammarAccess.getNotAccess().getNotExpressionAction_2(),
					$current);
			}
		)
	)
;

// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	iv_ruleVar=ruleVar
	{ $current=$iv_ruleVar.current; }
	EOF;

// Rule Var
ruleVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_id_0_0=RULE_ID
			{
				newLeafNode(lv_id_0_0, grammarAccess.getVarAccess().getIdIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVarRule());
				}
				setWithLastConsumed(
					$current,
					"id",
					lv_id_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleConst
entryRuleConst returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstRule()); }
	iv_ruleConst=ruleConst
	{ $current=$iv_ruleConst.current; }
	EOF;

// Rule Const
ruleConst returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_val_0_1='true'
				{
					newLeafNode(lv_val_0_1, grammarAccess.getConstAccess().getValTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstRule());
					}
					setWithLastConsumed($current, "val", lv_val_0_1, null);
				}
				    |
				lv_val_0_2='false'
				{
					newLeafNode(lv_val_0_2, grammarAccess.getConstAccess().getValFalseKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstRule());
					}
					setWithLastConsumed($current, "val", lv_val_0_2, null);
				}
			)
		)
	)
;

// Rule SATSolverMethod
ruleSATSolverMethod returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='sat4j-java'
			{
				$current = grammarAccess.getSATSolverMethodAccess().getSAT4J_JAVAEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSATSolverMethodAccess().getSAT4J_JAVAEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='sat4j-jar'
			{
				$current = grammarAccess.getSATSolverMethodAccess().getSAT4J_JAREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSATSolverMethodAccess().getSAT4J_JAREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='sat4j-maven'
			{
				$current = grammarAccess.getSATSolverMethodAccess().getSAT4J_MAVENEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getSATSolverMethodAccess().getSAT4J_MAVENEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
