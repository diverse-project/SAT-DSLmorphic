/*
 * generated by Xtext 2.19.0
 */
grammar InternalDimacs;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.DimacsGrammarAccess;

}

@parser::members {

 	private DimacsGrammarAccess grammarAccess;

    public InternalDimacsParser(TokenStream input, DimacsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "CNF";
   	}

   	@Override
   	protected DimacsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCNF
entryRuleCNF returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCNFRule()); }
	iv_ruleCNF=ruleCNF
	{ $current=$iv_ruleCNF.current; }
	EOF;

// Rule CNF
ruleCNF returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCNFAccess().getCommentsCommentaireParserRuleCall_0_0());
				}
				lv_comments_0_0=ruleCommentaire
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCNFRule());
					}
					add(
						$current,
						"comments",
						lv_comments_0_0,
						"org.xtext.example.mydsl.Dimacs.Commentaire");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_1='\n'
		{
			newLeafNode(otherlv_1, grammarAccess.getCNFAccess().getLineFeedKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCNFAccess().getProblemLigneProblemeParserRuleCall_2_0());
				}
				lv_problem_2_0=ruleLigneProbleme
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCNFRule());
					}
					add(
						$current,
						"problem",
						lv_problem_2_0,
						"org.xtext.example.mydsl.Dimacs.LigneProbleme");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='\n'
		{
			newLeafNode(otherlv_3, grammarAccess.getCNFAccess().getLineFeedKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCNFAccess().getClausesLigneClauseParserRuleCall_4_0());
				}
				lv_clauses_4_0=ruleLigneClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCNFRule());
					}
					add(
						$current,
						"clauses",
						lv_clauses_4_0,
						"org.xtext.example.mydsl.Dimacs.LigneClause");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleCommentaire
entryRuleCommentaire returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommentaireRule()); }
	iv_ruleCommentaire=ruleCommentaire
	{ $current=$iv_ruleCommentaire.current; }
	EOF;

// Rule Commentaire
ruleCommentaire returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='c'
		{
			newLeafNode(otherlv_0, grammarAccess.getCommentaireAccess().getCKeyword_0());
		}
		(
			(
				lv_content_1_0=RULE_STRING
				{
					newLeafNode(lv_content_1_0, grammarAccess.getCommentaireAccess().getContentSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommentaireRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='\n'
		{
			newLeafNode(otherlv_2, grammarAccess.getCommentaireAccess().getLineFeedKeyword_2());
		}
	)
;

// Entry rule entryRuleLigneProbleme
entryRuleLigneProbleme returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLigneProblemeRule()); }
	iv_ruleLigneProbleme=ruleLigneProbleme
	{ $current=$iv_ruleLigneProbleme.current; }
	EOF;

// Rule LigneProbleme
ruleLigneProbleme returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='p'
		{
			newLeafNode(otherlv_0, grammarAccess.getLigneProblemeAccess().getPKeyword_0());
		}
		otherlv_1='cnf'
		{
			newLeafNode(otherlv_1, grammarAccess.getLigneProblemeAccess().getCnfKeyword_1());
		}
		(
			(
				lv_nb_variables_2_0=RULE_INT
				{
					newLeafNode(lv_nb_variables_2_0, grammarAccess.getLigneProblemeAccess().getNb_variablesINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLigneProblemeRule());
					}
					addWithLastConsumed(
						$current,
						"nb_variables",
						lv_nb_variables_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				lv_nb_clauses_3_0=RULE_INT
				{
					newLeafNode(lv_nb_clauses_3_0, grammarAccess.getLigneProblemeAccess().getNb_clausesINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLigneProblemeRule());
					}
					addWithLastConsumed(
						$current,
						"nb_clauses",
						lv_nb_clauses_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='\n'
		{
			newLeafNode(otherlv_4, grammarAccess.getLigneProblemeAccess().getLineFeedKeyword_4());
		}
	)
;

// Entry rule entryRuleLigneClause
entryRuleLigneClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLigneClauseRule()); }
	iv_ruleLigneClause=ruleLigneClause
	{ $current=$iv_ruleLigneClause.current; }
	EOF;

// Rule LigneClause
ruleLigneClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLigneClauseAccess().getLitterauxLitteralParserRuleCall_0_0());
				}
				lv_litteraux_0_0=rulelitteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLigneClauseRule());
					}
					add(
						$current,
						"litteraux",
						lv_litteraux_0_0,
						"org.xtext.example.mydsl.Dimacs.litteral");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_1='0'
		{
			newLeafNode(otherlv_1, grammarAccess.getLigneClauseAccess().getDigitZeroKeyword_1());
		}
	)
;

// Entry rule entryRulelitteral
entryRulelitteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLitteralRule()); }
	iv_rulelitteral=rulelitteral
	{ $current=$iv_rulelitteral.current; }
	EOF;

// Rule litteral
rulelitteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0=RULE_INT
			{
				newLeafNode(lv_val_0_0, grammarAccess.getLitteralAccess().getValINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLitteralRule());
				}
				setWithLastConsumed(
					$current,
					"val",
					lv_val_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
