/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.sat.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.sat.SATSolverMethod;
import org.xtext.example.mydsl.sat.Sat;
import org.xtext.example.mydsl.sat.SatPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sat</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.sat.impl.SatImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sat.impl.SatImpl#getSolver_method <em>Solver method</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SatImpl extends MinimalEObjectImpl.Container implements Sat
{
  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected EObject type;

  /**
   * The default value of the '{@link #getSolver_method() <em>Solver method</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSolver_method()
   * @generated
   * @ordered
   */
  protected static final SATSolverMethod SOLVER_METHOD_EDEFAULT = SATSolverMethod.SAT4J_JAVA;

  /**
   * The cached value of the '{@link #getSolver_method() <em>Solver method</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSolver_method()
   * @generated
   * @ordered
   */
  protected SATSolverMethod solver_method = SOLVER_METHOD_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SatImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SatPackage.Literals.SAT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType(EObject newType, NotificationChain msgs)
  {
    EObject oldType = type;
    type = newType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SatPackage.SAT__TYPE, oldType, newType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(EObject newType)
  {
    if (newType != type)
    {
      NotificationChain msgs = null;
      if (type != null)
        msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SatPackage.SAT__TYPE, null, msgs);
      if (newType != null)
        msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SatPackage.SAT__TYPE, null, msgs);
      msgs = basicSetType(newType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SatPackage.SAT__TYPE, newType, newType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SATSolverMethod getSolver_method()
  {
    return solver_method;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSolver_method(SATSolverMethod newSolver_method)
  {
    SATSolverMethod oldSolver_method = solver_method;
    solver_method = newSolver_method == null ? SOLVER_METHOD_EDEFAULT : newSolver_method;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SatPackage.SAT__SOLVER_METHOD, oldSolver_method, solver_method));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SatPackage.SAT__TYPE:
        return basicSetType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SatPackage.SAT__TYPE:
        return getType();
      case SatPackage.SAT__SOLVER_METHOD:
        return getSolver_method();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SatPackage.SAT__TYPE:
        setType((EObject)newValue);
        return;
      case SatPackage.SAT__SOLVER_METHOD:
        setSolver_method((SATSolverMethod)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SatPackage.SAT__TYPE:
        setType((EObject)null);
        return;
      case SatPackage.SAT__SOLVER_METHOD:
        setSolver_method(SOLVER_METHOD_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SatPackage.SAT__TYPE:
        return type != null;
      case SatPackage.SAT__SOLVER_METHOD:
        return solver_method != SOLVER_METHOD_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (solver_method: ");
    result.append(solver_method);
    result.append(')');
    return result.toString();
  }

} //SatImpl
