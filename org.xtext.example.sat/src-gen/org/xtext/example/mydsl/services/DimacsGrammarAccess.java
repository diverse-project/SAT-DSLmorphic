/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DimacsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CNFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Dimacs.CNF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentsCommentaireParserRuleCall_0_0 = (RuleCall)cCommentsAssignment_0.eContents().get(0);
		private final Keyword cLineFeedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProblemAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProblemLigneProblemeParserRuleCall_2_0 = (RuleCall)cProblemAssignment_2.eContents().get(0);
		private final Keyword cLineFeedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cClausesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClausesLigneClauseParserRuleCall_4_0 = (RuleCall)cClausesAssignment_4.eContents().get(0);
		
		//CNF:
		//	comments+=Commentaire* '\n' problem+=LigneProbleme '\n' clauses+=LigneClause*;
		@Override public ParserRule getRule() { return rule; }
		
		//comments+=Commentaire* '\n' problem+=LigneProbleme '\n' clauses+=LigneClause*
		public Group getGroup() { return cGroup; }
		
		//comments+=Commentaire*
		public Assignment getCommentsAssignment_0() { return cCommentsAssignment_0; }
		
		//Commentaire
		public RuleCall getCommentsCommentaireParserRuleCall_0_0() { return cCommentsCommentaireParserRuleCall_0_0; }
		
		//'\n'
		public Keyword getLineFeedKeyword_1() { return cLineFeedKeyword_1; }
		
		//problem+=LigneProbleme
		public Assignment getProblemAssignment_2() { return cProblemAssignment_2; }
		
		//LigneProbleme
		public RuleCall getProblemLigneProblemeParserRuleCall_2_0() { return cProblemLigneProblemeParserRuleCall_2_0; }
		
		//'\n'
		public Keyword getLineFeedKeyword_3() { return cLineFeedKeyword_3; }
		
		//clauses+=LigneClause*
		public Assignment getClausesAssignment_4() { return cClausesAssignment_4; }
		
		//LigneClause
		public RuleCall getClausesLigneClauseParserRuleCall_4_0() { return cClausesLigneClauseParserRuleCall_4_0; }
	}
	public class CommentaireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Dimacs.Commentaire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentSTRINGTerminalRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		private final Keyword cLineFeedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Commentaire:
		//	'c' content=STRING '\n';
		@Override public ParserRule getRule() { return rule; }
		
		//'c' content=STRING '\n'
		public Group getGroup() { return cGroup; }
		
		//'c'
		public Keyword getCKeyword_0() { return cCKeyword_0; }
		
		//content=STRING
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_1_0() { return cContentSTRINGTerminalRuleCall_1_0; }
		
		//'\n'
		public Keyword getLineFeedKeyword_2() { return cLineFeedKeyword_2; }
	}
	public class LigneProblemeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Dimacs.LigneProbleme");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCnfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNb_variablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNb_variablesINTTerminalRuleCall_2_0 = (RuleCall)cNb_variablesAssignment_2.eContents().get(0);
		private final Assignment cNb_clausesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNb_clausesINTTerminalRuleCall_3_0 = (RuleCall)cNb_clausesAssignment_3.eContents().get(0);
		private final Keyword cLineFeedKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LigneProbleme:
		//	'p' 'cnf' nb_variables+=INT nb_clauses+=INT '\n';
		@Override public ParserRule getRule() { return rule; }
		
		//'p' 'cnf' nb_variables+=INT nb_clauses+=INT '\n'
		public Group getGroup() { return cGroup; }
		
		//'p'
		public Keyword getPKeyword_0() { return cPKeyword_0; }
		
		//'cnf'
		public Keyword getCnfKeyword_1() { return cCnfKeyword_1; }
		
		//nb_variables+=INT
		public Assignment getNb_variablesAssignment_2() { return cNb_variablesAssignment_2; }
		
		//INT
		public RuleCall getNb_variablesINTTerminalRuleCall_2_0() { return cNb_variablesINTTerminalRuleCall_2_0; }
		
		//nb_clauses+=INT
		public Assignment getNb_clausesAssignment_3() { return cNb_clausesAssignment_3; }
		
		//INT
		public RuleCall getNb_clausesINTTerminalRuleCall_3_0() { return cNb_clausesINTTerminalRuleCall_3_0; }
		
		//'\n'
		public Keyword getLineFeedKeyword_4() { return cLineFeedKeyword_4; }
	}
	public class LigneClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Dimacs.LigneClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLitterauxAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLitterauxLitteralParserRuleCall_0_0 = (RuleCall)cLitterauxAssignment_0.eContents().get(0);
		private final Keyword cDigitZeroKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LigneClause:
		//	litteraux+=litteral+ '0';
		@Override public ParserRule getRule() { return rule; }
		
		//litteraux+=litteral+ '0'
		public Group getGroup() { return cGroup; }
		
		//litteraux+=litteral+
		public Assignment getLitterauxAssignment_0() { return cLitterauxAssignment_0; }
		
		//litteral
		public RuleCall getLitterauxLitteralParserRuleCall_0_0() { return cLitterauxLitteralParserRuleCall_0_0; }
		
		//'0'
		public Keyword getDigitZeroKeyword_1() { return cDigitZeroKeyword_1; }
	}
	public class LitteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Dimacs.litteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//litteral:
		//	val=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	
	
	private final CNFElements pCNF;
	private final CommentaireElements pCommentaire;
	private final LigneProblemeElements pLigneProbleme;
	private final LigneClauseElements pLigneClause;
	private final LitteralElements pLitteral;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DimacsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCNF = new CNFElements();
		this.pCommentaire = new CommentaireElements();
		this.pLigneProbleme = new LigneProblemeElements();
		this.pLigneClause = new LigneClauseElements();
		this.pLitteral = new LitteralElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Dimacs".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CNF:
	//	comments+=Commentaire* '\n' problem+=LigneProbleme '\n' clauses+=LigneClause*;
	public CNFElements getCNFAccess() {
		return pCNF;
	}
	
	public ParserRule getCNFRule() {
		return getCNFAccess().getRule();
	}
	
	//Commentaire:
	//	'c' content=STRING '\n';
	public CommentaireElements getCommentaireAccess() {
		return pCommentaire;
	}
	
	public ParserRule getCommentaireRule() {
		return getCommentaireAccess().getRule();
	}
	
	//LigneProbleme:
	//	'p' 'cnf' nb_variables+=INT nb_clauses+=INT '\n';
	public LigneProblemeElements getLigneProblemeAccess() {
		return pLigneProbleme;
	}
	
	public ParserRule getLigneProblemeRule() {
		return getLigneProblemeAccess().getRule();
	}
	
	//LigneClause:
	//	litteraux+=litteral+ '0';
	public LigneClauseElements getLigneClauseAccess() {
		return pLigneClause;
	}
	
	public ParserRule getLigneClauseRule() {
		return getLigneClauseAccess().getRule();
	}
	
	//litteral:
	//	val=INT;
	public LitteralElements getLitteralAccess() {
		return pLitteral;
	}
	
	public ParserRule getLitteralRule() {
		return getLitteralAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
