/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.dimacs.CNF;
import org.xtext.example.mydsl.dimacs.Commentaire;
import org.xtext.example.mydsl.dimacs.DimacsPackage;
import org.xtext.example.mydsl.dimacs.LigneClause;
import org.xtext.example.mydsl.dimacs.LigneProbleme;
import org.xtext.example.mydsl.dimacs.litteral;
import org.xtext.example.mydsl.services.DimacsGrammarAccess;

@SuppressWarnings("all")
public class DimacsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DimacsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DimacsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DimacsPackage.CNF:
				sequence_CNF(context, (CNF) semanticObject); 
				return; 
			case DimacsPackage.COMMENTAIRE:
				sequence_Commentaire(context, (Commentaire) semanticObject); 
				return; 
			case DimacsPackage.LIGNE_CLAUSE:
				sequence_LigneClause(context, (LigneClause) semanticObject); 
				return; 
			case DimacsPackage.LIGNE_PROBLEME:
				sequence_LigneProbleme(context, (LigneProbleme) semanticObject); 
				return; 
			case DimacsPackage.LITTERAL:
				sequence_litteral(context, (litteral) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CNF returns CNF
	 *
	 * Constraint:
	 *     (comments+=Commentaire* problem+=LigneProbleme clauses+=LigneClause*)
	 */
	protected void sequence_CNF(ISerializationContext context, CNF semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Commentaire returns Commentaire
	 *
	 * Constraint:
	 *     content=STRING
	 */
	protected void sequence_Commentaire(ISerializationContext context, Commentaire semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DimacsPackage.Literals.COMMENTAIRE__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DimacsPackage.Literals.COMMENTAIRE__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommentaireAccess().getContentSTRINGTerminalRuleCall_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LigneClause returns LigneClause
	 *
	 * Constraint:
	 *     litteraux+=litteral+
	 */
	protected void sequence_LigneClause(ISerializationContext context, LigneClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LigneProbleme returns LigneProbleme
	 *
	 * Constraint:
	 *     (nb_variables+=INT nb_clauses+=INT)
	 */
	protected void sequence_LigneProbleme(ISerializationContext context, LigneProbleme semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     litteral returns litteral
	 *
	 * Constraint:
	 *     val=INT
	 */
	protected void sequence_litteral(ISerializationContext context, litteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DimacsPackage.Literals.LITTERAL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DimacsPackage.Literals.LITTERAL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLitteralAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
}
