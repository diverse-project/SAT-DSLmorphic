/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.msat.GJ_MC_Tests

import com.google.inject.Inject
import java.io.BufferedReader
import java.io.InputStreamReader
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.msat.GJ_MC_Process.Sat4jLauncher
import org.xtext.example.mydsl1.mSat.SATMorphic
import org.xtext.example.mydsl1.tests.MSatInjectorProvider

@ExtendWith(InjectionExtension)
@InjectWith(MSatInjectorProvider)
class MSatParsingTest {
	@Inject
	ParseHelper<SATMorphic> parseHelper
	
	@Test
	def void loadSolvers() {
		val result = parseHelper.parse('''
			solver 
				   minisat rnd-freq 1
				   cryptominisat
			benchmarkDIMACS "foo1.cnf", "foo2.cnf"
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadSAT4J() {
		val result = parseHelper.parse('''
			solver 
				   sat4j-java
			benchmarkDIMACS "foo1.cnf"
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		// Call the launcher that dispatch the work over the solvers
		val out = Sat4jLauncher.launch(result)
		// get the result from the returned matrix
		Assertions.assertTrue(out.get(0).get(0))
	}
	
	@Test
	def void loadSAT4J_MVN() {
		val result = parseHelper.parse('''
			solver 
				   sat4j-maven
			benchmarkDIMACS "foo1.cnf"
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		// Call the launcher that dispatch the work over the solvers
		val out = Sat4jLauncher.launch(result)
		// get the result from the returned matrix
		Assertions.assertNull(out.get(0).get(0))  // null because we have only generated the program
		
		var sat = false
		var line = ""
		var process = Runtime.getRuntime().exec("mvn exec:java -f org.xtext.example.mydsl.sat.compiledsat4j")
		
		val output = new BufferedReader(new InputStreamReader(process.getInputStream()));
		while((line = output.readLine()) !== null){
			if(line.equals("Satisfiable !")) sat = true
		}
		
		Assertions.assertTrue(sat)
	}
	
	@Test
	def void loadSAT4J_JAR() {
		val result = parseHelper.parse('''
			solver 
				   sat4j-jar
			benchmarkDIMACS "foo1.cnf"
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		// Call the launcher that dispatch the work over the solvers
		val out = Sat4jLauncher.launch(result)
		// get the result from the returned matrix
		Assertions.assertTrue(out.get(0).get(0))
	}
}
