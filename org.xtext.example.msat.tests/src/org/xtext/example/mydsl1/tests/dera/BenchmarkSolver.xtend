/*
* generated by launch script for benchmark
*/
package org.xtext.example.mydsl1.tests.dera

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.mydsl1.mSat.SATMorphic
import org.xtext.example.mydsl1.tests.MSatInjectorProvider
import org.xtext.example.mydsl1.mSat.BenchmarkFormula
import org.xtext.example.mydsl1.mSat.BenchmarkDimacs

@ExtendWith(InjectionExtension)
@InjectWith(MSatInjectorProvider)
class BenchmarkSolver {
	@Inject
	ParseHelper<SATMorphic> parseHelper

@Test
def void loadModel() {
    System.out.println("Benchmark,Solver,version,Sat?,Time(ms)");
}


@Test
def void loadModel0() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/ProcessBean.sk_8_64.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel1() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/ProcessBean.sk_8_64.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel2() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/ProcessBean.sk_8_64.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel3() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/ProcessBean.sk_8_64.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel4() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/ProcessBean.sk_8_64.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel5() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/diagStencilClean.sk_41_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel6() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/diagStencilClean.sk_41_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel7() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/diagStencilClean.sk_41_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel8() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/diagStencilClean.sk_41_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel9() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/diagStencilClean.sk_41_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel10() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/ActivityService.sk_11_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel11() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/ActivityService.sk_11_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel12() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/ActivityService.sk_11_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel13() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/ActivityService.sk_11_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel14() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/ActivityService.sk_11_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel15() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/jburnim_morton.sk_13_530.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel16() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/jburnim_morton.sk_13_530.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel17() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/jburnim_morton.sk_13_530.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel18() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/jburnim_morton.sk_13_530.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel19() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/jburnim_morton.sk_13_530.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel20() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/diagStencil.sk_35_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel21() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/diagStencil.sk_35_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel22() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/diagStencil.sk_35_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel23() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/diagStencil.sk_35_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel24() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/diagStencil.sk_35_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel25() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/29.sk_3_45.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel26() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/29.sk_3_45.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel27() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/29.sk_3_45.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel28() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/29.sk_3_45.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel29() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/29.sk_3_45.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel30() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/27.sk_3_32.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel31() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/27.sk_3_32.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel32() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/27.sk_3_32.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel33() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/27.sk_3_32.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel34() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/27.sk_3_32.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel35() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/81.sk_5_51.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel36() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/81.sk_5_51.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel37() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/81.sk_5_51.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel38() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/81.sk_5_51.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel39() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/81.sk_5_51.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel40() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/36.sk_3_77.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel41() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/36.sk_3_77.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel42() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/36.sk_3_77.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel43() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/36.sk_3_77.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel44() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/36.sk_3_77.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel45() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/reverse.sk_11_258.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel46() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/reverse.sk_11_258.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel47() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/reverse.sk_11_258.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel48() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/reverse.sk_11_258.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel49() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/reverse.sk_11_258.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel50() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/57.sk_4_64.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel51() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/57.sk_4_64.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel52() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/57.sk_4_64.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel53() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/57.sk_4_64.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel54() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/57.sk_4_64.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel55() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/19.sk_3_48.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel56() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/19.sk_3_48.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel57() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/19.sk_3_48.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel58() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/19.sk_3_48.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel59() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/19.sk_3_48.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel60() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/7.sk_4_50.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel61() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/7.sk_4_50.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel62() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/7.sk_4_50.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel63() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/7.sk_4_50.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel64() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/7.sk_4_50.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel65() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/71.sk_3_65.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel66() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/71.sk_3_65.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel67() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/71.sk_3_65.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel68() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/71.sk_3_65.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel69() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/71.sk_3_65.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel70() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/listReverse.sk_11_43.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel71() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/listReverse.sk_11_43.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel72() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/listReverse.sk_11_43.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel73() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/listReverse.sk_11_43.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel74() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/listReverse.sk_11_43.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel75() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/NotificationServiceImpl2.sk_10_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel76() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/NotificationServiceImpl2.sk_10_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel77() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/NotificationServiceImpl2.sk_10_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel78() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/NotificationServiceImpl2.sk_10_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel79() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/NotificationServiceImpl2.sk_10_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel80() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/Pollard.sk_1_10.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel81() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/Pollard.sk_1_10.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel82() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/Pollard.sk_1_10.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel83() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/Pollard.sk_1_10.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel84() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/Pollard.sk_1_10.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel85() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/enqueueSeqSK.sk_10_42.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel86() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/enqueueSeqSK.sk_10_42.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel87() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/enqueueSeqSK.sk_10_42.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel88() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/enqueueSeqSK.sk_10_42.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel89() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/enqueueSeqSK.sk_10_42.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel90() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/ProjectService3.sk_12_55.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel91() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/ProjectService3.sk_12_55.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel92() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/ProjectService3.sk_12_55.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel93() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/ProjectService3.sk_12_55.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel94() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/ProjectService3.sk_12_55.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel95() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/karatsuba.sk_7_41.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel96() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/karatsuba.sk_7_41.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel97() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/karatsuba.sk_7_41.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel98() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/karatsuba.sk_7_41.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel99() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/karatsuba.sk_7_41.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel100() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/17.sk_3_45.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel101() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/17.sk_3_45.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel102() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/17.sk_3_45.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel103() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/17.sk_3_45.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel104() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/17.sk_3_45.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel105() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/70.sk_3_40.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel106() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/70.sk_3_40.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel107() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/70.sk_3_40.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel108() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/70.sk_3_40.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel109() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/70.sk_3_40.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel110() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/ConcreteRoleAffectationService.sk_119_273.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel111() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/ConcreteRoleAffectationService.sk_119_273.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel112() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/ConcreteRoleAffectationService.sk_119_273.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel113() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/ConcreteRoleAffectationService.sk_119_273.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel114() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/ConcreteRoleAffectationService.sk_119_273.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel115() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/54.sk_12_97.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel116() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/54.sk_12_97.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel117() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/54.sk_12_97.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel118() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/54.sk_12_97.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel119() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/54.sk_12_97.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel120() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/lss.sk_6_7.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel121() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/lss.sk_6_7.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel122() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/lss.sk_6_7.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel123() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/lss.sk_6_7.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel124() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/lss.sk_6_7.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel125() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/84.sk_4_77.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel126() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/84.sk_4_77.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel127() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/84.sk_4_77.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel128() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/84.sk_4_77.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel129() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/84.sk_4_77.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel130() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/80.sk_2_48.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel131() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/80.sk_2_48.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel132() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/80.sk_2_48.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel133() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/80.sk_2_48.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel134() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/80.sk_2_48.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel135() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/56.sk_6_38.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel136() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/56.sk_6_38.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel137() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/56.sk_6_38.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel138() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/56.sk_6_38.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel139() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/56.sk_6_38.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel140() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/51.sk_4_38.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel141() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/51.sk_4_38.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel142() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/51.sk_4_38.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel143() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/51.sk_4_38.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel144() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/51.sk_4_38.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel145() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/tutorial2.sk_3_4.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel146() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/tutorial2.sk_3_4.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel147() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/tutorial2.sk_3_4.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel148() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/tutorial2.sk_3_4.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel149() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/tutorial2.sk_3_4.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel150() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/isolateRightmost.sk_7_481.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel151() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/isolateRightmost.sk_7_481.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel152() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/isolateRightmost.sk_7_481.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel153() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/isolateRightmost.sk_7_481.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel154() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/isolateRightmost.sk_7_481.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel155() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/ConcreteActivityService.sk_13_28.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel156() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/ConcreteActivityService.sk_13_28.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel157() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/ConcreteActivityService.sk_13_28.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel158() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/ConcreteActivityService.sk_13_28.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel159() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/ConcreteActivityService.sk_13_28.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel160() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/35.sk_3_52.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel161() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/35.sk_3_52.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel162() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/35.sk_3_52.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel163() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/35.sk_3_52.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel164() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/35.sk_3_52.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel165() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/compress.sk_17_291.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel166() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/compress.sk_17_291.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel167() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/compress.sk_17_291.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel168() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/compress.sk_17_291.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel169() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/compress.sk_17_291.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel170() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/20.sk_1_51.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel171() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/20.sk_1_51.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel172() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/20.sk_1_51.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel173() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/20.sk_1_51.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel174() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/20.sk_1_51.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel175() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/ActivityService2.sk_10_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel176() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/ActivityService2.sk_10_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel177() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/ActivityService2.sk_10_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel178() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/ActivityService2.sk_10_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel179() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/ActivityService2.sk_10_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel180() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/parity.sk_11_11.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel181() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/parity.sk_11_11.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel182() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/parity.sk_11_11.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel183() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/parity.sk_11_11.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel184() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/parity.sk_11_11.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel185() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/log2.sk_72_391.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel186() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/log2.sk_72_391.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel187() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/log2.sk_72_391.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel188() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/log2.sk_72_391.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel189() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/log2.sk_72_391.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel190() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/111.sk_2_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel191() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/111.sk_2_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel192() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/111.sk_2_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel193() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/111.sk_2_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel194() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/111.sk_2_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel195() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/30.sk_5_76.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel196() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/30.sk_5_76.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel197() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/30.sk_5_76.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel198() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/30.sk_5_76.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel199() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/30.sk_5_76.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel200() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/10.sk_1_46.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel201() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/10.sk_1_46.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel202() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/10.sk_1_46.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel203() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/10.sk_1_46.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel204() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/10.sk_1_46.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel205() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/xpose.sk_6_134.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel206() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/xpose.sk_6_134.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel207() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/xpose.sk_6_134.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel208() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/xpose.sk_6_134.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel209() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/xpose.sk_6_134.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel210() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/107.sk_3_90.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel211() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/107.sk_3_90.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel212() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/107.sk_3_90.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel213() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/107.sk_3_90.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel214() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/107.sk_3_90.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel215() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/LoginService2.sk_23_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel216() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/LoginService2.sk_23_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel217() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/LoginService2.sk_23_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel218() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/LoginService2.sk_23_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel219() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/LoginService2.sk_23_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel220() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/110.sk_3_88.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel221() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/110.sk_3_88.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel222() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/110.sk_3_88.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel223() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/110.sk_3_88.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel224() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/110.sk_3_88.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel225() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/polynomial.sk_7_25.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel226() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/polynomial.sk_7_25.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel227() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/polynomial.sk_7_25.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel228() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/polynomial.sk_7_25.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel229() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/polynomial.sk_7_25.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel230() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/partition.sk_22_155.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel231() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/partition.sk_22_155.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel232() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/partition.sk_22_155.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel233() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/partition.sk_22_155.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel234() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/partition.sk_22_155.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel235() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/logcount.sk_16_86.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel236() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/logcount.sk_16_86.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel237() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/logcount.sk_16_86.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel238() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/logcount.sk_16_86.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel239() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/logcount.sk_16_86.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel240() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/sort.sk_8_52.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel241() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/sort.sk_8_52.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel242() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/sort.sk_8_52.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel243() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/sort.sk_8_52.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel244() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/sort.sk_8_52.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel245() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/53.sk_4_32.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel246() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/53.sk_4_32.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel247() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/53.sk_4_32.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel248() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/53.sk_4_32.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel249() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/53.sk_4_32.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel250() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/IssueServiceImpl.sk_8_30.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel251() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/IssueServiceImpl.sk_8_30.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel252() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/IssueServiceImpl.sk_8_30.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel253() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/IssueServiceImpl.sk_8_30.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel254() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/IssueServiceImpl.sk_8_30.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel255() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/PhaseService.sk_14_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel256() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/PhaseService.sk_14_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel257() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/PhaseService.sk_14_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel258() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/PhaseService.sk_14_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel259() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/PhaseService.sk_14_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel260() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/77.sk_3_44.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel261() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/77.sk_3_44.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel262() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/77.sk_3_44.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel263() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/77.sk_3_44.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel264() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/77.sk_3_44.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel265() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/GuidanceService2.sk_2_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel266() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/GuidanceService2.sk_2_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel267() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/GuidanceService2.sk_2_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel268() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/GuidanceService2.sk_2_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel269() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/GuidanceService2.sk_2_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel270() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/UserServiceImpl.sk_8_32.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel271() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/UserServiceImpl.sk_8_32.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel272() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/UserServiceImpl.sk_8_32.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel273() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/UserServiceImpl.sk_8_32.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel274() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/UserServiceImpl.sk_8_32.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel275() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/tutorial1.sk_1_1.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel276() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/tutorial1.sk_1_1.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel277() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/tutorial1.sk_1_1.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel278() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/tutorial1.sk_1_1.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel279() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/tutorial1.sk_1_1.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel280() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/79.sk_4_40.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel281() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/79.sk_4_40.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel282() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/79.sk_4_40.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel283() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/79.sk_4_40.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel284() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/79.sk_4_40.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel285() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/LoginService.sk_20_34.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel286() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/LoginService.sk_20_34.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel287() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/LoginService.sk_20_34.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel288() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/LoginService.sk_20_34.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel289() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/LoginService.sk_20_34.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel290() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/SetTest.sk_9_21.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel291() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/SetTest.sk_9_21.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel292() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/SetTest.sk_9_21.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel293() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/SetTest.sk_9_21.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel294() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/SetTest.sk_9_21.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel295() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/109.sk_4_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel296() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/109.sk_4_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel297() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/109.sk_4_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel298() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/109.sk_4_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel299() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/109.sk_4_36.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel300() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/doublyLinkedList.sk_8_37.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel301() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/doublyLinkedList.sk_8_37.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel302() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/doublyLinkedList.sk_8_37.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel303() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/doublyLinkedList.sk_8_37.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel304() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/doublyLinkedList.sk_8_37.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel305() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/55.sk_3_46.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel306() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/55.sk_3_46.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel307() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/55.sk_3_46.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel308() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/55.sk_3_46.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel309() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/55.sk_3_46.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel310() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/IterationService.sk_12_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel311() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/IterationService.sk_12_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel312() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/IterationService.sk_12_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel313() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/IterationService.sk_12_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel314() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/IterationService.sk_12_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel315() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/32.sk_4_38.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel316() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/32.sk_4_38.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel317() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/32.sk_4_38.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel318() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/32.sk_4_38.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel319() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/32.sk_4_38.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel320() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/tutorial3.sk_4_31.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel321() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/tutorial3.sk_4_31.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel322() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/tutorial3.sk_4_31.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel323() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/tutorial3.sk_4_31.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel324() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/tutorial3.sk_4_31.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel325() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/GuidanceService.sk_4_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel326() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/GuidanceService.sk_4_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel327() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/GuidanceService.sk_4_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel328() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/GuidanceService.sk_4_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel329() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/GuidanceService.sk_4_27.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel330() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/tableBasedAddition.sk_240_1024.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel331() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/tableBasedAddition.sk_240_1024.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel332() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/tableBasedAddition.sk_240_1024.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel333() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/tableBasedAddition.sk_240_1024.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel334() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/tableBasedAddition.sk_240_1024.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel335() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/registerlesSwap.sk_3_10.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel336() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/registerlesSwap.sk_3_10.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel337() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/registerlesSwap.sk_3_10.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel338() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/registerlesSwap.sk_3_10.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel339() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/registerlesSwap.sk_3_10.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel340() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/63.sk_3_64.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel341() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/63.sk_3_64.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel342() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/63.sk_3_64.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel343() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/63.sk_3_64.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel344() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/63.sk_3_64.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}


@Test
def void loadModel345() {
    val result = parseHelper.parse('''
    solver sat4j-java
    benchmarkDIMACS "samplingfm/Benchmarks/signedAvg.sk_8_1020.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.Sat4JLibrarySolver(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-java,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-java,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel346() {
    val result = parseHelper.parse('''
    solver sat4j-maven
    benchmarkDIMACS "samplingfm/Benchmarks/signedAvg.sk_8_1020.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.MavenSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-maven,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-maven,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel347() {
    val result = parseHelper.parse('''
    solver sat4j-jar
    benchmarkDIMACS "samplingfm/Benchmarks/signedAvg.sk_8_1020.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.JarSolving(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",sat4j-jar,2.3.1,SAT," + time);
    }else{
        System.out.println(file + ",sat4j-jar,2.3.1,UNSAT," + time);
    }
}


@Test
def void loadModel348() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/signedAvg.sk_8_1020.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_8(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.8,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.8,UNSAT," + time);
    }
}


@Test
def void loadModel349() {
    val result = parseHelper.parse('''
    solver cryptominisat
    benchmarkDIMACS "samplingfm/Benchmarks/signedAvg.sk_8_1020.cnf"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.CryptoMinisat5_6_7(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){
	System.out.println(file + ",cryptominisat,5.6.7,SAT," + time);
    }else{
        System.out.println(file + ",cryptominisat,5.6.7,UNSAT," + time);
    }
}

}