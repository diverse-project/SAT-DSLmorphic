/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl1.tests.dera

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.mydsl1.mSat.SATMorphic
import org.xtext.example.mydsl1.tests.MSatInjectorProvider
import org.xtext.example.mydsl1.mSat.BenchmarkFormula

@ExtendWith(InjectionExtension)
@InjectWith(MSatInjectorProvider)
class MSatDimacsPrinterTest {
	@Inject
	ParseHelper<SATMorphic> parseHelper
	
	@Test
	def void loadModel1() {
		val result = parseHelper.parse('''
			solver sat4j-jar benchmarkFormula A ^ B ^ C
		''')
		var benchmark = result.benchmark as BenchmarkFormula;
		var dimacs = DimacsPrinter.dimacsPrinter(benchmark.expressions.get(0));
		Assertions.assertEquals(dimacs, "p cnf 3 3\n1 0\n2 0\n3 0")
	}
	
	@Test
	def void loadModel2() {
		val result = parseHelper.parse('''
			solver sat4j-jar benchmarkFormula A ^ B
		''')
		var benchmark = result.benchmark as BenchmarkFormula;
		var dimacs = DimacsPrinter.dimacsPrinter(benchmark.expressions.get(0));
		Assertions.assertEquals(dimacs, "p cnf 2 2\n1 0\n2 0")
	}
	
	@Test
	def void loadModel3() {
		val result = parseHelper.parse('''
			solver sat4j-jar benchmarkFormula A
		''')
		var benchmark = result.benchmark as BenchmarkFormula;
		var dimacs = DimacsPrinter.dimacsPrinter(benchmark.expressions.get(0));
		Assertions.assertEquals(dimacs, "p cnf 1 1\n1 0")
	}
	
	@Test
	def void loadModel4() {
		val result = parseHelper.parse('''
			solver sat4j-jar benchmarkFormula A v B
		''')
		var benchmark = result.benchmark as BenchmarkFormula;
		var dimacs = DimacsPrinter.dimacsPrinter(benchmark.expressions.get(0));
		Assertions.assertEquals(dimacs, "p cnf 2 1\n1 2 0")
	}
	
	@Test
	def void loadModel5() {
		val result = parseHelper.parse('''
			solver sat4j-jar benchmarkFormula (A v B v C) ^ (!A v D)
		''')
		var benchmark = result.benchmark as BenchmarkFormula;
		var dimacs = DimacsPrinter.dimacsPrinter(benchmark.expressions.get(0));
		Assertions.assertEquals(dimacs, "p cnf 4 2\n1 2 3 0\n-1 4 0")
	}

}
