/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.msat.GJ_MC_Tests

import com.google.inject.Inject
import java.io.BufferedWriter
import java.io.FileWriter
import java.nio.file.Files
import java.nio.file.Paths
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.msat.GJ_MC_Process.BenchmarkLauncher
import org.xtext.example.mydsl1.mSat.SATMorphic
import org.xtext.example.mydsl1.tests.MSatInjectorProvider

@ExtendWith(InjectionExtension)
@InjectWith(MSatInjectorProvider)
class Benchmarks {
	@Inject
	ParseHelper<SATMorphic> parseHelper
	
	@Test
	def void computeBenchmarks() {
		
		val BASE_DIR = "/home/gwandalf/SAT-DSLmorphic/JOUNEAUX-CAUTE_annexes/"
		
		// msat file generation
		Runtime.getRuntime().exec(BASE_DIR+"generateMSAT.py")
		
		// msat file parsing
		val result = parseHelper.parse(
			new String(Files.readAllBytes(Paths.get(BASE_DIR+"benchmarks.msat")))
		)
		
		// parsing verification
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		val csv = BenchmarkLauncher.launch(result,25)
		
		val writer = new BufferedWriter(new FileWriter(BASE_DIR+"benchmarks.csv"));
	    writer.write(csv);
	     
	    writer.close();
	}
	
}
