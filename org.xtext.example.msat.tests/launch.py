import os


HEADER="""/*
* generated by launch script for benchmark
*/
package org.xtext.example.mydsl1.tests.dera

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.mydsl1.mSat.SATMorphic
import org.xtext.example.mydsl1.tests.MSatInjectorProvider
import org.xtext.example.mydsl1.mSat.BenchmarkFormula
import org.xtext.example.mydsl1.mSat.BenchmarkDimacs

@ExtendWith(InjectionExtension)
@InjectWith(MSatInjectorProvider)
class BenchmarkSolver {
	@Inject
	ParseHelper<SATMorphic> parseHelper

@Test
def void loadModel0() {
    System.out.println("Benchmark,Solver,version,Sat?,Time(ms)");
}

"""


REPO_HTML = "https://github.com/diverse-project/samplingfm.git"
FILE_DIR = "samplingfm"
TEST_FILENAME = "src/org/xtext/example/mydsl1/tests/dera/BenchmarkSolver.xtend"
SOLVER = {"sat4j-java" : {"Sat4JLibrarySolver"},\
          "sat4j-maven" : {"MavenSolving"},\
          "sat4j-jar" : {"JarSolving"},\
          "cryptominisat" : {"CryptoMinisat5_6_8", "CryptoMinisat5_6_7"}}
EXTENSION = ".cnf"

def main():
    if FILE_DIR not in os.listdir():
        os.system("git clone {}".format(REPO_HTML))
    res = ""
    cpt = 1
    version = ""
    old = os.getcwd()
    os.chdir(FILE_DIR + '/Benchmarks')
    for file in os.scandir():
        if file.is_file() and file.name[-4:] == EXTENSION:
            for solver in SOLVER:
                if 'sat4j' in solver:
                    version = "2.3.1"
                for meth in SOLVER[solver]:
                    if meth[-1] == '8':
                        version = "5.6.8"
                    if meth[-1] == "7":
                        version = "5.6.7"
                    tmp = """
@Test
def void loadModel{}() {{
    val result = parseHelper.parse('''
    solver {}
    benchmarkDIMACS "{}"
    ''')
    Assertions.assertNotNull(result)
    val errors = result.eResource.errors
    Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
    var benchmark = result.benchmark as BenchmarkDimacs
    var file = benchmark.dimacses.get(0);
    var start = System.currentTimeMillis();
    var res = Solver.{}(file)
    var end = System.currentTimeMillis();
    var time = end - start;
    if (res){{
	System.out.println(file + ",{},{},SAT," + time);
    }}else{{
        System.out.println(file + ",{},{},UNSAT," + time);
    }}
}}

""".format(cpt, solver, FILE_DIR + '/Benchmarks' + '/' + file.name, meth, solver, version, solver, version)
                    res += tmp
                    cpt += 1
    stream = open("{}/{}".format(old, TEST_FILENAME), 'w+')
    stream.write(HEADER)
    stream.write(res + "}")

if __name__ == '__main__':
    main()
