/*
 * generated by Xtext 2.19.0
 */
grammar InternalMSat;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl1.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl1.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl1.services.MSatGrammarAccess;

}
@parser::members {
	private MSatGrammarAccess grammarAccess;

	public void setGrammarAccess(MSatGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSATMorphic
entryRuleSATMorphic
:
{ before(grammarAccess.getSATMorphicRule()); }
	 ruleSATMorphic
{ after(grammarAccess.getSATMorphicRule()); } 
	 EOF 
;

// Rule SATMorphic
ruleSATMorphic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSATMorphicAccess().getGroup()); }
		(rule__SATMorphic__Group__0)
		{ after(grammarAccess.getSATMorphicAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSATSolver
entryRuleSATSolver
:
{ before(grammarAccess.getSATSolverRule()); }
	 ruleSATSolver
{ after(grammarAccess.getSATSolverRule()); } 
	 EOF 
;

// Rule SATSolver
ruleSATSolver 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSATSolverAccess().getGroup()); }
		(rule__SATSolver__Group__0)
		{ after(grammarAccess.getSATSolverAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSat4J
entryRuleSat4J
:
{ before(grammarAccess.getSat4JRule()); }
	 ruleSat4J
{ after(grammarAccess.getSat4JRule()); } 
	 EOF 
;

// Rule Sat4J
ruleSat4J 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSat4JAccess().getVariantAssignment()); }
		(rule__Sat4J__VariantAssignment)
		{ after(grammarAccess.getSat4JAccess().getVariantAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSolverVersion
entryRuleSolverVersion
:
{ before(grammarAccess.getSolverVersionRule()); }
	 ruleSolverVersion
{ after(grammarAccess.getSolverVersionRule()); } 
	 EOF 
;

// Rule SolverVersion
ruleSolverVersion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSolverVersionAccess().getGroup()); }
		(rule__SolverVersion__Group__0)
		{ after(grammarAccess.getSolverVersionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMiniSAT
entryRuleMiniSAT
:
{ before(grammarAccess.getMiniSATRule()); }
	 ruleMiniSAT
{ after(grammarAccess.getMiniSATRule()); } 
	 EOF 
;

// Rule MiniSAT
ruleMiniSAT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMiniSATAccess().getGroup()); }
		(rule__MiniSAT__Group__0)
		{ after(grammarAccess.getMiniSATAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCryptoMiniSAT
entryRuleCryptoMiniSAT
:
{ before(grammarAccess.getCryptoMiniSATRule()); }
	 ruleCryptoMiniSAT
{ after(grammarAccess.getCryptoMiniSATRule()); } 
	 EOF 
;

// Rule CryptoMiniSAT
ruleCryptoMiniSAT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCryptoMiniSATAccess().getVariantAssignment()); }
		(rule__CryptoMiniSAT__VariantAssignment)
		{ after(grammarAccess.getCryptoMiniSATAccess().getVariantAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMiniSATParameter
entryRuleMiniSATParameter
:
{ before(grammarAccess.getMiniSATParameterRule()); }
	 ruleMiniSATParameter
{ after(grammarAccess.getMiniSATParameterRule()); } 
	 EOF 
;

// Rule MiniSATParameter
ruleMiniSATParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMiniSATParameterAccess().getGroup()); }
		(rule__MiniSATParameter__Group__0)
		{ after(grammarAccess.getMiniSATParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBenchmark
entryRuleBenchmark
:
{ before(grammarAccess.getBenchmarkRule()); }
	 ruleBenchmark
{ after(grammarAccess.getBenchmarkRule()); } 
	 EOF 
;

// Rule Benchmark
ruleBenchmark 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBenchmarkAccess().getAlternatives()); }
		(rule__Benchmark__Alternatives)
		{ after(grammarAccess.getBenchmarkAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBenchmarkDimacs
entryRuleBenchmarkDimacs
:
{ before(grammarAccess.getBenchmarkDimacsRule()); }
	 ruleBenchmarkDimacs
{ after(grammarAccess.getBenchmarkDimacsRule()); } 
	 EOF 
;

// Rule BenchmarkDimacs
ruleBenchmarkDimacs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBenchmarkDimacsAccess().getGroup()); }
		(rule__BenchmarkDimacs__Group__0)
		{ after(grammarAccess.getBenchmarkDimacsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBenchmarkFormula
entryRuleBenchmarkFormula
:
{ before(grammarAccess.getBenchmarkFormulaRule()); }
	 ruleBenchmarkFormula
{ after(grammarAccess.getBenchmarkFormulaRule()); } 
	 EOF 
;

// Rule BenchmarkFormula
ruleBenchmarkFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBenchmarkFormulaAccess().getGroup()); }
		(rule__BenchmarkFormula__Group__0)
		{ after(grammarAccess.getBenchmarkFormulaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBiImpl
entryRuleBiImpl
:
{ before(grammarAccess.getBiImplRule()); }
	 ruleBiImpl
{ after(grammarAccess.getBiImplRule()); } 
	 EOF 
;

// Rule BiImpl
ruleBiImpl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBiImplAccess().getGroup()); }
		(rule__BiImpl__Group__0)
		{ after(grammarAccess.getBiImplAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImpl
entryRuleImpl
:
{ before(grammarAccess.getImplRule()); }
	 ruleImpl
{ after(grammarAccess.getImplRule()); } 
	 EOF 
;

// Rule Impl
ruleImpl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImplAccess().getGroup()); }
		(rule__Impl__Group__0)
		{ after(grammarAccess.getImplAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNand
entryRuleNand
:
{ before(grammarAccess.getNandRule()); }
	 ruleNand
{ after(grammarAccess.getNandRule()); } 
	 EOF 
;

// Rule Nand
ruleNand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNandAccess().getGroup()); }
		(rule__Nand__Group__0)
		{ after(grammarAccess.getNandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getGroup()); }
		(rule__Not__Group__0)
		{ after(grammarAccess.getNotAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVar
entryRuleVar
:
{ before(grammarAccess.getVarRule()); }
	 ruleVar
{ after(grammarAccess.getVarRule()); } 
	 EOF 
;

// Rule Var
ruleVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarAccess().getIdAssignment()); }
		(rule__Var__IdAssignment)
		{ after(grammarAccess.getVarAccess().getIdAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConst
entryRuleConst
:
{ before(grammarAccess.getConstRule()); }
	 ruleConst
{ after(grammarAccess.getConstRule()); } 
	 EOF 
;

// Rule Const
ruleConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstAccess().getValAssignment()); }
		(rule__Const__ValAssignment)
		{ after(grammarAccess.getConstAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Sat4JVariant
ruleSat4JVariant
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSat4JVariantAccess().getAlternatives()); }
		(rule__Sat4JVariant__Alternatives)
		{ after(grammarAccess.getSat4JVariantAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SATSolver__SolverAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSATSolverAccess().getSolverSat4JParserRuleCall_0_0_0()); }
		ruleSat4J
		{ after(grammarAccess.getSATSolverAccess().getSolverSat4JParserRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSATSolverAccess().getSolverCryptoMiniSATParserRuleCall_0_0_1()); }
		ruleCryptoMiniSAT
		{ after(grammarAccess.getSATSolverAccess().getSolverCryptoMiniSATParserRuleCall_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSATSolverAccess().getSolverMiniSATParserRuleCall_0_0_2()); }
		ruleMiniSAT
		{ after(grammarAccess.getSATSolverAccess().getSolverMiniSATParserRuleCall_0_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Benchmark__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBenchmarkAccess().getBenchmarkDimacsParserRuleCall_0()); }
		ruleBenchmarkDimacs
		{ after(grammarAccess.getBenchmarkAccess().getBenchmarkDimacsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBenchmarkAccess().getBenchmarkFormulaParserRuleCall_1()); }
		ruleBenchmarkFormula
		{ after(grammarAccess.getBenchmarkAccess().getBenchmarkFormulaParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNandAccess().getVerticalLineKeyword_1_1_0()); }
		'|'
		{ after(grammarAccess.getNandAccess().getVerticalLineKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getNandAccess().getUpwardsArrowKeyword_1_1_1()); }
		'\u2191'
		{ after(grammarAccess.getNandAccess().getUpwardsArrowKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_0()); }
		(rule__Primary__Group_0__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getNotParserRuleCall_1()); }
		ruleNot
		{ after(grammarAccess.getPrimaryAccess().getNotParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getConstParserRuleCall_2()); }
		ruleConst
		{ after(grammarAccess.getPrimaryAccess().getConstParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getVarParserRuleCall_3()); }
		ruleVar
		{ after(grammarAccess.getPrimaryAccess().getVarParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getExclamationMarkKeyword_0_0()); }
		'!'
		{ after(grammarAccess.getNotAccess().getExclamationMarkKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotAccess().getTildeKeyword_0_1()); }
		'~'
		{ after(grammarAccess.getNotAccess().getTildeKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__ValAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstAccess().getValTrueKeyword_0_0()); }
		'true'
		{ after(grammarAccess.getConstAccess().getValTrueKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstAccess().getValFalseKeyword_0_1()); }
		'false'
		{ after(grammarAccess.getConstAccess().getValFalseKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sat4JVariant__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSat4JVariantAccess().getSAT4J_JAVAEnumLiteralDeclaration_0()); }
		('sat4j-java')
		{ after(grammarAccess.getSat4JVariantAccess().getSAT4J_JAVAEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSat4JVariantAccess().getSAT4J_JAREnumLiteralDeclaration_1()); }
		('sat4j-jar')
		{ after(grammarAccess.getSat4JVariantAccess().getSAT4J_JAREnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getSat4JVariantAccess().getSAT4J_COMPEnumLiteralDeclaration_2()); }
		('sat4j-maven')
		{ after(grammarAccess.getSat4JVariantAccess().getSAT4J_COMPEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SATMorphic__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SATMorphic__Group__0__Impl
	rule__SATMorphic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SATMorphic__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSATMorphicAccess().getSolverKeyword_0()); }
	'solver'
	{ after(grammarAccess.getSATMorphicAccess().getSolverKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SATMorphic__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SATMorphic__Group__1__Impl
	rule__SATMorphic__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SATMorphic__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSATMorphicAccess().getSolversAssignment_1()); }
		(rule__SATMorphic__SolversAssignment_1)
		{ after(grammarAccess.getSATMorphicAccess().getSolversAssignment_1()); }
	)
	(
		{ before(grammarAccess.getSATMorphicAccess().getSolversAssignment_1()); }
		(rule__SATMorphic__SolversAssignment_1)*
		{ after(grammarAccess.getSATMorphicAccess().getSolversAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SATMorphic__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SATMorphic__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SATMorphic__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSATMorphicAccess().getBenchmarkAssignment_2()); }
	(rule__SATMorphic__BenchmarkAssignment_2)
	{ after(grammarAccess.getSATMorphicAccess().getBenchmarkAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SATSolver__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SATSolver__Group__0__Impl
	rule__SATSolver__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SATSolver__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSATSolverAccess().getSolverAssignment_0()); }
	(rule__SATSolver__SolverAssignment_0)
	{ after(grammarAccess.getSATSolverAccess().getSolverAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SATSolver__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SATSolver__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SATSolver__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSATSolverAccess().getVersionAssignment_1()); }
	(rule__SATSolver__VersionAssignment_1)?
	{ after(grammarAccess.getSATSolverAccess().getVersionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SolverVersion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SolverVersion__Group__0__Impl
	rule__SolverVersion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SolverVersion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSolverVersionAccess().getVersionKeyword_0()); }
	'version'
	{ after(grammarAccess.getSolverVersionAccess().getVersionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SolverVersion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SolverVersion__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SolverVersion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSolverVersionAccess().getVersionAssignment_1()); }
	(rule__SolverVersion__VersionAssignment_1)
	{ after(grammarAccess.getSolverVersionAccess().getVersionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MiniSAT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MiniSAT__Group__0__Impl
	rule__MiniSAT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MiniSAT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMiniSATAccess().getVariantAssignment_0()); }
	(rule__MiniSAT__VariantAssignment_0)
	{ after(grammarAccess.getMiniSATAccess().getVariantAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MiniSAT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MiniSAT__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MiniSAT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMiniSATAccess().getParameterAssignment_1()); }
	(rule__MiniSAT__ParameterAssignment_1)?
	{ after(grammarAccess.getMiniSATAccess().getParameterAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MiniSATParameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MiniSATParameter__Group__0__Impl
	rule__MiniSATParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MiniSATParameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMiniSATParameterAccess().getRndFreqKeyword_0()); }
	'rnd-freq'
	{ after(grammarAccess.getMiniSATParameterAccess().getRndFreqKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MiniSATParameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MiniSATParameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MiniSATParameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMiniSATParameterAccess().getRndfreqAssignment_1()); }
	(rule__MiniSATParameter__RndfreqAssignment_1)
	{ after(grammarAccess.getMiniSATParameterAccess().getRndfreqAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BenchmarkDimacs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BenchmarkDimacs__Group__0__Impl
	rule__BenchmarkDimacs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkDimacs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBenchmarkDimacsAccess().getBenchmarkDIMACSKeyword_0()); }
	'benchmarkDIMACS'
	{ after(grammarAccess.getBenchmarkDimacsAccess().getBenchmarkDIMACSKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkDimacs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BenchmarkDimacs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkDimacs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBenchmarkDimacsAccess().getGroup_1()); }
	(rule__BenchmarkDimacs__Group_1__0)
	{ after(grammarAccess.getBenchmarkDimacsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BenchmarkDimacs__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BenchmarkDimacs__Group_1__0__Impl
	rule__BenchmarkDimacs__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkDimacs__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBenchmarkDimacsAccess().getDimacsesAssignment_1_0()); }
	(rule__BenchmarkDimacs__DimacsesAssignment_1_0)
	{ after(grammarAccess.getBenchmarkDimacsAccess().getDimacsesAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkDimacs__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BenchmarkDimacs__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkDimacs__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBenchmarkDimacsAccess().getGroup_1_1()); }
	(rule__BenchmarkDimacs__Group_1_1__0)*
	{ after(grammarAccess.getBenchmarkDimacsAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BenchmarkDimacs__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BenchmarkDimacs__Group_1_1__0__Impl
	rule__BenchmarkDimacs__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkDimacs__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBenchmarkDimacsAccess().getCommaKeyword_1_1_0()); }
	','
	{ after(grammarAccess.getBenchmarkDimacsAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkDimacs__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BenchmarkDimacs__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkDimacs__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBenchmarkDimacsAccess().getDimacsesAssignment_1_1_1()); }
	(rule__BenchmarkDimacs__DimacsesAssignment_1_1_1)
	{ after(grammarAccess.getBenchmarkDimacsAccess().getDimacsesAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BenchmarkFormula__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BenchmarkFormula__Group__0__Impl
	rule__BenchmarkFormula__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkFormula__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBenchmarkFormulaAccess().getBenchmarkFormulaKeyword_0()); }
	'benchmarkFormula'
	{ after(grammarAccess.getBenchmarkFormulaAccess().getBenchmarkFormulaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkFormula__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BenchmarkFormula__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkFormula__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBenchmarkFormulaAccess().getGroup_1()); }
	(rule__BenchmarkFormula__Group_1__0)
	{ after(grammarAccess.getBenchmarkFormulaAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BenchmarkFormula__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BenchmarkFormula__Group_1__0__Impl
	rule__BenchmarkFormula__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkFormula__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBenchmarkFormulaAccess().getExpressionsAssignment_1_0()); }
	(rule__BenchmarkFormula__ExpressionsAssignment_1_0)
	{ after(grammarAccess.getBenchmarkFormulaAccess().getExpressionsAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkFormula__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BenchmarkFormula__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkFormula__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBenchmarkFormulaAccess().getGroup_1_1()); }
	(rule__BenchmarkFormula__Group_1_1__0)*
	{ after(grammarAccess.getBenchmarkFormulaAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BenchmarkFormula__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BenchmarkFormula__Group_1_1__0__Impl
	rule__BenchmarkFormula__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkFormula__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBenchmarkFormulaAccess().getCommaKeyword_1_1_0()); }
	','
	{ after(grammarAccess.getBenchmarkFormulaAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkFormula__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BenchmarkFormula__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkFormula__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBenchmarkFormulaAccess().getExpressionsAssignment_1_1_1()); }
	(rule__BenchmarkFormula__ExpressionsAssignment_1_1_1)
	{ after(grammarAccess.getBenchmarkFormulaAccess().getExpressionsAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BiImpl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BiImpl__Group__0__Impl
	rule__BiImpl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BiImpl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBiImplAccess().getImplParserRuleCall_0()); }
	ruleImpl
	{ after(grammarAccess.getBiImplAccess().getImplParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BiImpl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BiImpl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BiImpl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBiImplAccess().getGroup_1()); }
	(rule__BiImpl__Group_1__0)*
	{ after(grammarAccess.getBiImplAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BiImpl__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BiImpl__Group_1__0__Impl
	rule__BiImpl__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BiImpl__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBiImplAccess().getBiImplLeftAction_1_0()); }
	()
	{ after(grammarAccess.getBiImplAccess().getBiImplLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BiImpl__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BiImpl__Group_1__1__Impl
	rule__BiImpl__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BiImpl__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBiImplAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_1()); }
	'<=>'
	{ after(grammarAccess.getBiImplAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BiImpl__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BiImpl__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BiImpl__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBiImplAccess().getRightAssignment_1_2()); }
	(rule__BiImpl__RightAssignment_1_2)
	{ after(grammarAccess.getBiImplAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Impl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Impl__Group__0__Impl
	rule__Impl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Impl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplAccess().getOrParserRuleCall_0()); }
	ruleOr
	{ after(grammarAccess.getImplAccess().getOrParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Impl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Impl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Impl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplAccess().getGroup_1()); }
	(rule__Impl__Group_1__0)*
	{ after(grammarAccess.getImplAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Impl__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Impl__Group_1__0__Impl
	rule__Impl__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Impl__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplAccess().getImplLeftAction_1_0()); }
	()
	{ after(grammarAccess.getImplAccess().getImplLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Impl__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Impl__Group_1__1__Impl
	rule__Impl__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Impl__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplAccess().getEqualsSignGreaterThanSignKeyword_1_1()); }
	'=>'
	{ after(grammarAccess.getImplAccess().getEqualsSignGreaterThanSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Impl__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Impl__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Impl__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImplAccess().getRightAssignment_1_2()); }
	(rule__Impl__RightAssignment_1_2)
	{ after(grammarAccess.getImplAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
	{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getGroup_1()); }
	(rule__Or__Group_1__0)*
	{ after(grammarAccess.getOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getVKeyword_1_1()); }
	'v'
	{ after(grammarAccess.getOrAccess().getVKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
	(rule__Or__RightAssignment_1_2)
	{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getNandParserRuleCall_0()); }
	ruleNand
	{ after(grammarAccess.getAndAccess().getNandParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)*
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getCircumflexAccentKeyword_1_1()); }
	'^'
	{ after(grammarAccess.getAndAccess().getCircumflexAccentKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
	(rule__And__RightAssignment_1_2)
	{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Nand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nand__Group__0__Impl
	rule__Nand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNandAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getNandAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNandAccess().getGroup_1()); }
	(rule__Nand__Group_1__0)*
	{ after(grammarAccess.getNandAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Nand__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nand__Group_1__0__Impl
	rule__Nand__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNandAccess().getNandLeftAction_1_0()); }
	()
	{ after(grammarAccess.getNandAccess().getNandLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nand__Group_1__1__Impl
	rule__Nand__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNandAccess().getAlternatives_1_1()); }
	(rule__Nand__Alternatives_1_1)
	{ after(grammarAccess.getNandAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nand__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNandAccess().getRightAssignment_1_2()); }
	(rule__Nand__RightAssignment_1_2)
	{ after(grammarAccess.getNandAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__0__Impl
	rule__Primary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__1__Impl
	rule__Primary__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getBiImplParserRuleCall_0_1()); }
	ruleBiImpl
	{ after(grammarAccess.getPrimaryAccess().getBiImplParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__0__Impl
	rule__Not__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getAlternatives_0()); }
	(rule__Not__Alternatives_0)
	{ after(grammarAccess.getNotAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__1__Impl
	rule__Not__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getPrimaryParserRuleCall_1()); }
	rulePrimary
	{ after(grammarAccess.getNotAccess().getPrimaryParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotExpressionAction_2()); }
	()
	{ after(grammarAccess.getNotAccess().getNotExpressionAction_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SATMorphic__SolversAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSATMorphicAccess().getSolversSATSolverParserRuleCall_1_0()); }
		ruleSATSolver
		{ after(grammarAccess.getSATMorphicAccess().getSolversSATSolverParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SATMorphic__BenchmarkAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSATMorphicAccess().getBenchmarkBenchmarkParserRuleCall_2_0()); }
		ruleBenchmark
		{ after(grammarAccess.getSATMorphicAccess().getBenchmarkBenchmarkParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SATSolver__SolverAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSATSolverAccess().getSolverAlternatives_0_0()); }
		(rule__SATSolver__SolverAlternatives_0_0)
		{ after(grammarAccess.getSATSolverAccess().getSolverAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SATSolver__VersionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSATSolverAccess().getVersionSolverVersionParserRuleCall_1_0()); }
		ruleSolverVersion
		{ after(grammarAccess.getSATSolverAccess().getVersionSolverVersionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sat4J__VariantAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSat4JAccess().getVariantSat4JVariantEnumRuleCall_0()); }
		ruleSat4JVariant
		{ after(grammarAccess.getSat4JAccess().getVariantSat4JVariantEnumRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SolverVersion__VersionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSolverVersionAccess().getVersionSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getSolverVersionAccess().getVersionSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MiniSAT__VariantAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMiniSATAccess().getVariantMinisatKeyword_0_0()); }
		(
			{ before(grammarAccess.getMiniSATAccess().getVariantMinisatKeyword_0_0()); }
			'minisat'
			{ after(grammarAccess.getMiniSATAccess().getVariantMinisatKeyword_0_0()); }
		)
		{ after(grammarAccess.getMiniSATAccess().getVariantMinisatKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MiniSAT__ParameterAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMiniSATAccess().getParameterMiniSATParameterParserRuleCall_1_0()); }
		ruleMiniSATParameter
		{ after(grammarAccess.getMiniSATAccess().getParameterMiniSATParameterParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CryptoMiniSAT__VariantAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCryptoMiniSATAccess().getVariantCryptominisatKeyword_0()); }
		(
			{ before(grammarAccess.getCryptoMiniSATAccess().getVariantCryptominisatKeyword_0()); }
			'cryptominisat'
			{ after(grammarAccess.getCryptoMiniSATAccess().getVariantCryptominisatKeyword_0()); }
		)
		{ after(grammarAccess.getCryptoMiniSATAccess().getVariantCryptominisatKeyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MiniSATParameter__RndfreqAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMiniSATParameterAccess().getRndfreqPROBATerminalRuleCall_1_0()); }
		RULE_PROBA
		{ after(grammarAccess.getMiniSATParameterAccess().getRndfreqPROBATerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkDimacs__DimacsesAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBenchmarkDimacsAccess().getDimacsesSTRINGTerminalRuleCall_1_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getBenchmarkDimacsAccess().getDimacsesSTRINGTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkDimacs__DimacsesAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBenchmarkDimacsAccess().getDimacsesSTRINGTerminalRuleCall_1_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getBenchmarkDimacsAccess().getDimacsesSTRINGTerminalRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkFormula__ExpressionsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBenchmarkFormulaAccess().getExpressionsBiImplParserRuleCall_1_0_0()); }
		ruleBiImpl
		{ after(grammarAccess.getBenchmarkFormulaAccess().getExpressionsBiImplParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BenchmarkFormula__ExpressionsAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBenchmarkFormulaAccess().getExpressionsBiImplParserRuleCall_1_1_1_0()); }
		ruleBiImpl
		{ after(grammarAccess.getBenchmarkFormulaAccess().getExpressionsBiImplParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BiImpl__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBiImplAccess().getRightImplParserRuleCall_1_2_0()); }
		ruleImpl
		{ after(grammarAccess.getBiImplAccess().getRightImplParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Impl__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImplAccess().getRightOrParserRuleCall_1_2_0()); }
		ruleOr
		{ after(grammarAccess.getImplAccess().getRightOrParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
		ruleAnd
		{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getRightNandParserRuleCall_1_2_0()); }
		ruleNand
		{ after(grammarAccess.getAndAccess().getRightNandParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNandAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getNandAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__IdAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarAccess().getIdIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVarAccess().getIdIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstAccess().getValAlternatives_0()); }
		(rule__Const__ValAlternatives_0)
		{ after(grammarAccess.getConstAccess().getValAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_PROBA : ('1'|'0' (. RULE_INT)?);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
