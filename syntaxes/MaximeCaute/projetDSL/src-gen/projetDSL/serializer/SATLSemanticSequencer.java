/*
 * generated by Xtext 2.19.0
 */
package projetDSL.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import projetDSL.myDsl.BooleanExpression;
import projetDSL.myDsl.BooleanExpressionsSystem;
import projetDSL.myDsl.MyDslPackage;
import projetDSL.myDsl.OperatorExpression;
import projetDSL.myDsl.Variable;
import projetDSL.services.SATLGrammarAccess;

@SuppressWarnings("all")
public class SATLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SATLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.BOOLEAN_EXPRESSION:
				if (rule == grammarAccess.getAndOperatorExpressionRule()) {
					sequence_AndOperatorExpression(context, (BooleanExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBasicExpressionRule()) {
					sequence_BasicExpression(context, (BooleanExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBiimpliesOperatorExpressionRule()) {
					sequence_BiimpliesOperatorExpression(context, (BooleanExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBooleanExpressionRule()) {
					sequence_BooleanExpression(context, (BooleanExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExcludesOperatorExpressionRule()) {
					sequence_ExcludesOperatorExpression(context, (BooleanExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getImpliesOperatorExpressionRule()) {
					sequence_ImpliesOperatorExpression(context, (BooleanExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNegOperatorExpressionRule()) {
					sequence_NegOperatorExpression(context, (BooleanExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOrOperatorExpressionRule()) {
					sequence_OrOperatorExpression(context, (BooleanExpression) semanticObject); 
					return; 
				}
				else break;
			case MyDslPackage.BOOLEAN_EXPRESSIONS_SYSTEM:
				sequence_BooleanExpressionsSystem(context, (BooleanExpressionsSystem) semanticObject); 
				return; 
			case MyDslPackage.OPERATOR_EXPRESSION:
				sequence_OperatorExpression(context, (OperatorExpression) semanticObject); 
				return; 
			case MyDslPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AndOperatorExpression returns BooleanExpression
	 *
	 * Constraint:
	 *     (leftMember+=NegOperatorExpression rightMember+=NegOperatorExpression*)
	 */
	protected void sequence_AndOperatorExpression(ISerializationContext context, BooleanExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BasicExpression returns BooleanExpression
	 *
	 * Constraint:
	 *     (variable+=Variable | operatorExpression+=OperatorExpression)
	 */
	protected void sequence_BasicExpression(ISerializationContext context, BooleanExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BiimpliesOperatorExpression returns BooleanExpression
	 *
	 * Constraint:
	 *     (leftMember+=ExcludesOperatorExpression rightMember+=ExcludesOperatorExpression*)
	 */
	protected void sequence_BiimpliesOperatorExpression(ISerializationContext context, BooleanExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BooleanExpression returns BooleanExpression
	 *
	 * Constraint:
	 *     expression+=BasicExpression
	 */
	protected void sequence_BooleanExpression(ISerializationContext context, BooleanExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BooleanExpressionsSystem returns BooleanExpressionsSystem
	 *
	 * Constraint:
	 *     booleanExpressions+=BooleanExpression*
	 */
	protected void sequence_BooleanExpressionsSystem(ISerializationContext context, BooleanExpressionsSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExcludesOperatorExpression returns BooleanExpression
	 *
	 * Constraint:
	 *     (leftMember+=ImpliesOperatorExpression rightMember+=ImpliesOperatorExpression?)
	 */
	protected void sequence_ExcludesOperatorExpression(ISerializationContext context, BooleanExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImpliesOperatorExpression returns BooleanExpression
	 *
	 * Constraint:
	 *     (leftMember+=OrOperatorExpression rightMember+=OrOperatorExpression?)
	 */
	protected void sequence_ImpliesOperatorExpression(ISerializationContext context, BooleanExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NegOperatorExpression returns BooleanExpression
	 *
	 * Constraint:
	 *     negatedMember+=BasicExpression
	 */
	protected void sequence_NegOperatorExpression(ISerializationContext context, BooleanExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperatorExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     expression+=BiimpliesOperatorExpression
	 */
	protected void sequence_OperatorExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OrOperatorExpression returns BooleanExpression
	 *
	 * Constraint:
	 *     (leftMember+=AndOperatorExpression rightMember+=AndOperatorExpression*)
	 */
	protected void sequence_OrOperatorExpression(ISerializationContext context, BooleanExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
