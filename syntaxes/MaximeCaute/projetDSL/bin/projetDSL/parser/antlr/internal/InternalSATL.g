/*
 * generated by Xtext 2.19.0
 */
grammar InternalSATL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package projetDSL.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package projetDSL.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import projetDSL.services.SATLGrammarAccess;

}

@parser::members {

 	private SATLGrammarAccess grammarAccess;

    public InternalSATLParser(TokenStream input, SATLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "BooleanExpressionsSystem";
   	}

   	@Override
   	protected SATLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleBooleanExpressionsSystem
entryRuleBooleanExpressionsSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionsSystemRule()); }
	iv_ruleBooleanExpressionsSystem=ruleBooleanExpressionsSystem
	{ $current=$iv_ruleBooleanExpressionsSystem.current; }
	EOF;

// Rule BooleanExpressionsSystem
ruleBooleanExpressionsSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanExpressionsSystemAccess().getBooleanExpressionsSystemAction_0(),
					$current);
			}
		)
		otherlv_1='Systeme'
		{
			newLeafNode(otherlv_1, grammarAccess.getBooleanExpressionsSystemAccess().getSystemeKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getBooleanExpressionsSystemAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanExpressionsSystemAccess().getBooleanExpressionsBooleanExpressionParserRuleCall_3_0());
				}
				lv_booleanExpressions_3_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanExpressionsSystemRule());
					}
					add(
						$current,
						"booleanExpressions",
						lv_booleanExpressions_3_0,
						"projetDSL.SATL.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getBooleanExpressionsSystemAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Variable'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getVariableKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getColonKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getVariableAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	iv_ruleBooleanExpression=ruleBooleanExpression
	{ $current=$iv_ruleBooleanExpression.current; }
	EOF;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Expression'
		{
			newLeafNode(otherlv_0, grammarAccess.getBooleanExpressionAccess().getExpressionKeyword_0());
		}
		(
			this_ID_1=RULE_ID
			{
				newLeafNode(this_ID_1, grammarAccess.getBooleanExpressionAccess().getIDTerminalRuleCall_1());
			}
		)?
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getBooleanExpressionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanExpressionAccess().getExpressionBasicExpressionParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleBasicExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanExpressionRule());
					}
					add(
						$current,
						"expression",
						lv_expression_3_0,
						"projetDSL.SATL.BasicExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getBooleanExpressionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleOperatorExpression
entryRuleOperatorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperatorExpressionRule()); }
	iv_ruleOperatorExpression=ruleOperatorExpression
	{ $current=$iv_ruleOperatorExpression.current; }
	EOF;

// Rule OperatorExpression
ruleOperatorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getOperatorExpressionAccess().getExpressionBiimpliesOperatorExpressionParserRuleCall_0());
			}
			lv_expression_0_0=ruleBiimpliesOperatorExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getOperatorExpressionRule());
				}
				add(
					$current,
					"expression",
					lv_expression_0_0,
					"projetDSL.SATL.BiimpliesOperatorExpression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBiimpliesOperatorExpression
entryRuleBiimpliesOperatorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBiimpliesOperatorExpressionRule()); }
	iv_ruleBiimpliesOperatorExpression=ruleBiimpliesOperatorExpression
	{ $current=$iv_ruleBiimpliesOperatorExpression.current; }
	EOF;

// Rule BiimpliesOperatorExpression
ruleBiimpliesOperatorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBiimpliesOperatorExpressionAccess().getLeftMemberExcludesOperatorExpressionParserRuleCall_0_0());
				}
				lv_leftMember_0_0=ruleExcludesOperatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBiimpliesOperatorExpressionRule());
					}
					add(
						$current,
						"leftMember",
						lv_leftMember_0_0,
						"projetDSL.SATL.ExcludesOperatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='<->'
			{
				newLeafNode(otherlv_1, grammarAccess.getBiimpliesOperatorExpressionAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBiimpliesOperatorExpressionAccess().getRightMemberExcludesOperatorExpressionParserRuleCall_1_1_0());
					}
					lv_rightMember_2_0=ruleExcludesOperatorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBiimpliesOperatorExpressionRule());
						}
						add(
							$current,
							"rightMember",
							lv_rightMember_2_0,
							"projetDSL.SATL.ExcludesOperatorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExcludesOperatorExpression
entryRuleExcludesOperatorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExcludesOperatorExpressionRule()); }
	iv_ruleExcludesOperatorExpression=ruleExcludesOperatorExpression
	{ $current=$iv_ruleExcludesOperatorExpression.current; }
	EOF;

// Rule ExcludesOperatorExpression
ruleExcludesOperatorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExcludesOperatorExpressionAccess().getLeftMemberImpliesOperatorExpressionParserRuleCall_0_0());
				}
				lv_leftMember_0_0=ruleImpliesOperatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExcludesOperatorExpressionRule());
					}
					add(
						$current,
						"leftMember",
						lv_leftMember_0_0,
						"projetDSL.SATL.ImpliesOperatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='<-!>'
			{
				newLeafNode(otherlv_1, grammarAccess.getExcludesOperatorExpressionAccess().getLessThanSignHyphenMinusExclamationMarkGreaterThanSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExcludesOperatorExpressionAccess().getRightMemberImpliesOperatorExpressionParserRuleCall_1_1_0());
					}
					lv_rightMember_2_0=ruleImpliesOperatorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExcludesOperatorExpressionRule());
						}
						add(
							$current,
							"rightMember",
							lv_rightMember_2_0,
							"projetDSL.SATL.ImpliesOperatorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleImpliesOperatorExpression
entryRuleImpliesOperatorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImpliesOperatorExpressionRule()); }
	iv_ruleImpliesOperatorExpression=ruleImpliesOperatorExpression
	{ $current=$iv_ruleImpliesOperatorExpression.current; }
	EOF;

// Rule ImpliesOperatorExpression
ruleImpliesOperatorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getImpliesOperatorExpressionAccess().getLeftMemberOrOperatorExpressionParserRuleCall_0_0());
				}
				lv_leftMember_0_0=ruleOrOperatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImpliesOperatorExpressionRule());
					}
					add(
						$current,
						"leftMember",
						lv_leftMember_0_0,
						"projetDSL.SATL.OrOperatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='->'
			{
				newLeafNode(otherlv_1, grammarAccess.getImpliesOperatorExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImpliesOperatorExpressionAccess().getRightMemberOrOperatorExpressionParserRuleCall_1_1_0());
					}
					lv_rightMember_2_0=ruleOrOperatorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImpliesOperatorExpressionRule());
						}
						add(
							$current,
							"rightMember",
							lv_rightMember_2_0,
							"projetDSL.SATL.OrOperatorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleOrOperatorExpression
entryRuleOrOperatorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrOperatorExpressionRule()); }
	iv_ruleOrOperatorExpression=ruleOrOperatorExpression
	{ $current=$iv_ruleOrOperatorExpression.current; }
	EOF;

// Rule OrOperatorExpression
ruleOrOperatorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOrOperatorExpressionAccess().getLeftMemberAndOperatorExpressionParserRuleCall_0_0());
				}
				lv_leftMember_0_0=ruleAndOperatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrOperatorExpressionRule());
					}
					add(
						$current,
						"leftMember",
						lv_leftMember_0_0,
						"projetDSL.SATL.AndOperatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='ou'
			{
				newLeafNode(otherlv_1, grammarAccess.getOrOperatorExpressionAccess().getOuKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrOperatorExpressionAccess().getRightMemberAndOperatorExpressionParserRuleCall_1_1_0());
					}
					lv_rightMember_2_0=ruleAndOperatorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrOperatorExpressionRule());
						}
						add(
							$current,
							"rightMember",
							lv_rightMember_2_0,
							"projetDSL.SATL.AndOperatorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndOperatorExpression
entryRuleAndOperatorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndOperatorExpressionRule()); }
	iv_ruleAndOperatorExpression=ruleAndOperatorExpression
	{ $current=$iv_ruleAndOperatorExpression.current; }
	EOF;

// Rule AndOperatorExpression
ruleAndOperatorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAndOperatorExpressionAccess().getLeftMemberNegOperatorExpressionParserRuleCall_0_0());
				}
				lv_leftMember_0_0=ruleNegOperatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndOperatorExpressionRule());
					}
					add(
						$current,
						"leftMember",
						lv_leftMember_0_0,
						"projetDSL.SATL.NegOperatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='et'
			{
				newLeafNode(otherlv_1, grammarAccess.getAndOperatorExpressionAccess().getEtKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndOperatorExpressionAccess().getRightMemberNegOperatorExpressionParserRuleCall_1_1_0());
					}
					lv_rightMember_2_0=ruleNegOperatorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndOperatorExpressionRule());
						}
						add(
							$current,
							"rightMember",
							lv_rightMember_2_0,
							"projetDSL.SATL.NegOperatorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNegOperatorExpression
entryRuleNegOperatorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegOperatorExpressionRule()); }
	iv_ruleNegOperatorExpression=ruleNegOperatorExpression
	{ $current=$iv_ruleNegOperatorExpression.current; }
	EOF;

// Rule NegOperatorExpression
ruleNegOperatorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='non'
			{
				newLeafNode(otherlv_0, grammarAccess.getNegOperatorExpressionAccess().getNonKeyword_0());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getNegOperatorExpressionAccess().getNegatedMemberBasicExpressionParserRuleCall_1_0());
				}
				lv_negatedMember_1_0=ruleBasicExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNegOperatorExpressionRule());
					}
					add(
						$current,
						"negatedMember",
						lv_negatedMember_1_0,
						"projetDSL.SATL.BasicExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBasicExpression
entryRuleBasicExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicExpressionRule()); }
	iv_ruleBasicExpression=ruleBasicExpression
	{ $current=$iv_ruleBasicExpression.current; }
	EOF;

// Rule BasicExpression
ruleBasicExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicExpressionAccess().getVariableVariableParserRuleCall_0_0());
				}
				lv_variable_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicExpressionRule());
					}
					add(
						$current,
						"variable",
						lv_variable_0_0,
						"projetDSL.SATL.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getBasicExpressionAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBasicExpressionAccess().getOperatorExpressionOperatorExpressionParserRuleCall_1_1_0());
					}
					lv_operatorExpression_2_0=ruleOperatorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBasicExpressionRule());
						}
						add(
							$current,
							"operatorExpression",
							lv_operatorExpression_2_0,
							"projetDSL.SATL.OperatorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getBasicExpressionAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
