/*
 * generated by Xtext 2.19.0
 */
package projetDSL.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import projetDSL.ide.contentassist.antlr.internal.InternalSATLParser;
import projetDSL.services.SATLGrammarAccess;

public class SATLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SATLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SATLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBasicExpressionAccess().getAlternatives(), "rule__BasicExpression__Alternatives");
			builder.put(grammarAccess.getBooleanExpressionsSystemAccess().getGroup(), "rule__BooleanExpressionsSystem__Group__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getBooleanExpressionAccess().getGroup(), "rule__BooleanExpression__Group__0");
			builder.put(grammarAccess.getBiimpliesOperatorExpressionAccess().getGroup(), "rule__BiimpliesOperatorExpression__Group__0");
			builder.put(grammarAccess.getBiimpliesOperatorExpressionAccess().getGroup_1(), "rule__BiimpliesOperatorExpression__Group_1__0");
			builder.put(grammarAccess.getExcludesOperatorExpressionAccess().getGroup(), "rule__ExcludesOperatorExpression__Group__0");
			builder.put(grammarAccess.getExcludesOperatorExpressionAccess().getGroup_1(), "rule__ExcludesOperatorExpression__Group_1__0");
			builder.put(grammarAccess.getImpliesOperatorExpressionAccess().getGroup(), "rule__ImpliesOperatorExpression__Group__0");
			builder.put(grammarAccess.getImpliesOperatorExpressionAccess().getGroup_1(), "rule__ImpliesOperatorExpression__Group_1__0");
			builder.put(grammarAccess.getOrOperatorExpressionAccess().getGroup(), "rule__OrOperatorExpression__Group__0");
			builder.put(grammarAccess.getOrOperatorExpressionAccess().getGroup_1(), "rule__OrOperatorExpression__Group_1__0");
			builder.put(grammarAccess.getAndOperatorExpressionAccess().getGroup(), "rule__AndOperatorExpression__Group__0");
			builder.put(grammarAccess.getAndOperatorExpressionAccess().getGroup_1(), "rule__AndOperatorExpression__Group_1__0");
			builder.put(grammarAccess.getNegOperatorExpressionAccess().getGroup(), "rule__NegOperatorExpression__Group__0");
			builder.put(grammarAccess.getBasicExpressionAccess().getGroup_1(), "rule__BasicExpression__Group_1__0");
			builder.put(grammarAccess.getBooleanExpressionsSystemAccess().getBooleanExpressionsAssignment_3(), "rule__BooleanExpressionsSystem__BooleanExpressionsAssignment_3");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_2(), "rule__Variable__NameAssignment_2");
			builder.put(grammarAccess.getBooleanExpressionAccess().getExpressionAssignment_3(), "rule__BooleanExpression__ExpressionAssignment_3");
			builder.put(grammarAccess.getOperatorExpressionAccess().getExpressionAssignment(), "rule__OperatorExpression__ExpressionAssignment");
			builder.put(grammarAccess.getBiimpliesOperatorExpressionAccess().getLeftMemberAssignment_0(), "rule__BiimpliesOperatorExpression__LeftMemberAssignment_0");
			builder.put(grammarAccess.getBiimpliesOperatorExpressionAccess().getRightMemberAssignment_1_1(), "rule__BiimpliesOperatorExpression__RightMemberAssignment_1_1");
			builder.put(grammarAccess.getExcludesOperatorExpressionAccess().getLeftMemberAssignment_0(), "rule__ExcludesOperatorExpression__LeftMemberAssignment_0");
			builder.put(grammarAccess.getExcludesOperatorExpressionAccess().getRightMemberAssignment_1_1(), "rule__ExcludesOperatorExpression__RightMemberAssignment_1_1");
			builder.put(grammarAccess.getImpliesOperatorExpressionAccess().getLeftMemberAssignment_0(), "rule__ImpliesOperatorExpression__LeftMemberAssignment_0");
			builder.put(grammarAccess.getImpliesOperatorExpressionAccess().getRightMemberAssignment_1_1(), "rule__ImpliesOperatorExpression__RightMemberAssignment_1_1");
			builder.put(grammarAccess.getOrOperatorExpressionAccess().getLeftMemberAssignment_0(), "rule__OrOperatorExpression__LeftMemberAssignment_0");
			builder.put(grammarAccess.getOrOperatorExpressionAccess().getRightMemberAssignment_1_1(), "rule__OrOperatorExpression__RightMemberAssignment_1_1");
			builder.put(grammarAccess.getAndOperatorExpressionAccess().getLeftMemberAssignment_0(), "rule__AndOperatorExpression__LeftMemberAssignment_0");
			builder.put(grammarAccess.getAndOperatorExpressionAccess().getRightMemberAssignment_1_1(), "rule__AndOperatorExpression__RightMemberAssignment_1_1");
			builder.put(grammarAccess.getNegOperatorExpressionAccess().getNegatedMemberAssignment_1(), "rule__NegOperatorExpression__NegatedMemberAssignment_1");
			builder.put(grammarAccess.getBasicExpressionAccess().getVariableAssignment_0(), "rule__BasicExpression__VariableAssignment_0");
			builder.put(grammarAccess.getBasicExpressionAccess().getOperatorExpressionAssignment_1_1(), "rule__BasicExpression__OperatorExpressionAssignment_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SATLGrammarAccess grammarAccess;

	@Override
	protected InternalSATLParser createParser() {
		InternalSATLParser result = new InternalSATLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SATLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SATLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
