/*
 * generated by Xtext 2.19.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinExpr
entryRuleBinExpr
:
{ before(grammarAccess.getBinExprRule()); }
	 ruleBinExpr
{ after(grammarAccess.getBinExprRule()); } 
	 EOF 
;

// Rule BinExpr
ruleBinExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinExprAccess().getGroup()); }
		(rule__BinExpr__Group__0)
		{ after(grammarAccess.getBinExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinOp
entryRuleBinOp
:
{ before(grammarAccess.getBinOpRule()); }
	 ruleBinOp
{ after(grammarAccess.getBinOpRule()); } 
	 EOF 
;

// Rule BinOp
ruleBinOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinOpAccess().getAlternatives()); }
		(rule__BinOp__Alternatives)
		{ after(grammarAccess.getBinOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnExpr
entryRuleUnExpr
:
{ before(grammarAccess.getUnExprRule()); }
	 ruleUnExpr
{ after(grammarAccess.getUnExprRule()); } 
	 EOF 
;

// Rule UnExpr
ruleUnExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnExprAccess().getGroup()); }
		(rule__UnExpr__Group__0)
		{ after(grammarAccess.getUnExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnOp
entryRuleUnOp
:
{ before(grammarAccess.getUnOpRule()); }
	 ruleUnOp
{ after(grammarAccess.getUnOpRule()); } 
	 EOF 
;

// Rule UnOp
ruleUnOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnOpAccess().getExclamationMarkKeyword()); }
		'!'
		{ after(grammarAccess.getUnOpAccess().getExclamationMarkKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtom
entryRuleAtom
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomAccess().getNameAssignment()); }
		(rule__Atom__NameAssignment)
		{ after(grammarAccess.getAtomAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConst
entryRuleConst
:
{ before(grammarAccess.getConstRule()); }
	 ruleConst
{ after(grammarAccess.getConstRule()); } 
	 EOF 
;

// Rule Const
ruleConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstAccess().getAlternatives()); }
		(rule__Const__Alternatives)
		{ after(grammarAccess.getConstAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getExprAssignment_0()); }
		(rule__Expression__ExprAssignment_0)
		{ after(grammarAccess.getExpressionAccess().getExprAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getUnExprParserRuleCall_1()); }
		ruleUnExpr
		{ after(grammarAccess.getExpressionAccess().getUnExprParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getLiteralParserRuleCall_2()); }
		ruleLiteral
		{ after(grammarAccess.getExpressionAccess().getLiteralParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinOpAccess().getCircumflexAccentKeyword_0()); }
		'^'
		{ after(grammarAccess.getBinOpAccess().getCircumflexAccentKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinOpAccess().getVKeyword_1()); }
		'v'
		{ after(grammarAccess.getBinOpAccess().getVKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getBinOpAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
		'->'
		{ after(grammarAccess.getBinOpAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getBinOpAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_3()); }
		'<->'
		{ after(grammarAccess.getBinOpAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getBinOpAccess().getVerticalLineKeyword_4()); }
		'|'
		{ after(grammarAccess.getBinOpAccess().getVerticalLineKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getLit_atomAssignment_0()); }
		(rule__Literal__Lit_atomAssignment_0)
		{ after(grammarAccess.getLiteralAccess().getLit_atomAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getLit_constAssignment_1()); }
		(rule__Literal__Lit_constAssignment_1)
		{ after(grammarAccess.getLiteralAccess().getLit_constAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstAccess().getTKeyword_0()); }
		'#t'
		{ after(grammarAccess.getConstAccess().getTKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstAccess().getFKeyword_1()); }
		'#f'
		{ after(grammarAccess.getConstAccess().getFKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinExpr__Group__0__Impl
	rule__BinExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinExprAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getBinExprAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinExpr__Group__1__Impl
	rule__BinExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BinExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinExprAccess().getLeftexprAssignment_1()); }
	(rule__BinExpr__LeftexprAssignment_1)
	{ after(grammarAccess.getBinExprAccess().getLeftexprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinExpr__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinExpr__Group__2__Impl
	rule__BinExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BinExpr__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinExprAccess().getOpAssignment_2()); }
	(rule__BinExpr__OpAssignment_2)
	{ after(grammarAccess.getBinExprAccess().getOpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinExpr__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinExpr__Group__3__Impl
	rule__BinExpr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BinExpr__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinExprAccess().getRightexprAssignment_3()); }
	(rule__BinExpr__RightexprAssignment_3)
	{ after(grammarAccess.getBinExprAccess().getRightexprAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinExpr__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinExpr__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinExpr__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinExprAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getBinExprAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnExpr__Group__0__Impl
	rule__UnExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnExprAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getUnExprAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnExpr__Group__1__Impl
	rule__UnExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnExprAccess().getOpAssignment_1()); }
	(rule__UnExpr__OpAssignment_1)
	{ after(grammarAccess.getUnExprAccess().getOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnExpr__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnExpr__Group__2__Impl
	rule__UnExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnExpr__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnExprAccess().getExprAssignment_2()); }
	(rule__UnExpr__ExprAssignment_2)
	{ after(grammarAccess.getUnExprAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnExpr__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnExpr__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnExpr__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnExprAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getUnExprAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__ExprAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getExprBinExprParserRuleCall_0_0()); }
		ruleBinExpr
		{ after(grammarAccess.getExpressionAccess().getExprBinExprParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinExpr__LeftexprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinExprAccess().getLeftexprExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getBinExprAccess().getLeftexprExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinExpr__OpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinExprAccess().getOpBinOpParserRuleCall_2_0()); }
		ruleBinOp
		{ after(grammarAccess.getBinExprAccess().getOpBinOpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinExpr__RightexprAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinExprAccess().getRightexprExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getBinExprAccess().getRightexprExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnExpr__OpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnExprAccess().getOpUnOpParserRuleCall_1_0()); }
		ruleUnOp
		{ after(grammarAccess.getUnExprAccess().getOpUnOpParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnExpr__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnExprAccess().getExprExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getUnExprAccess().getExprExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Lit_atomAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getLit_atomAtomParserRuleCall_0_0()); }
		ruleAtom
		{ after(grammarAccess.getLiteralAccess().getLit_atomAtomParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Lit_constAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getLit_constConstParserRuleCall_1_0()); }
		ruleConst
		{ after(grammarAccess.getLiteralAccess().getLit_constConstParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getAtomAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
