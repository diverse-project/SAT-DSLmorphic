/*
 * generated by Xtext 2.19.0
 */
grammar InternalSattl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.SattlGrammarAccess;

}
@parser::members {
	private SattlGrammarAccess grammarAccess;

	public void setGrammarAccess(SattlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDocument
entryRuleDocument
:
{ before(grammarAccess.getDocumentRule()); }
	 ruleDocument
{ after(grammarAccess.getDocumentRule()); } 
	 EOF 
;

// Rule Document
ruleDocument 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDocumentAccess().getFormAssignment()); }
		(rule__Document__FormAssignment)*
		{ after(grammarAccess.getDocumentAccess().getFormAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFormulae
entryRuleFormulae
:
{ before(grammarAccess.getFormulaeRule()); }
	 ruleFormulae
{ after(grammarAccess.getFormulaeRule()); } 
	 EOF 
;

// Rule Formulae
ruleFormulae 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFormulaeAccess().getAlternatives()); }
		(rule__Formulae__Alternatives)
		{ after(grammarAccess.getFormulaeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtom
entryRuleAtom
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomAccess().getNameAssignment()); }
		(rule__Atom__NameAssignment)
		{ after(grammarAccess.getAtomAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinop
entryRuleBinop
:
{ before(grammarAccess.getBinopRule()); }
	 ruleBinop
{ after(grammarAccess.getBinopRule()); } 
	 EOF 
;

// Rule Binop
ruleBinop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinopAccess().getAlternatives()); }
		(rule__Binop__Alternatives)
		{ after(grammarAccess.getBinopAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnop
entryRuleUnop
:
{ before(grammarAccess.getUnopRule()); }
	 ruleUnop
{ after(grammarAccess.getUnopRule()); } 
	 EOF 
;

// Rule Unop
ruleUnop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnopAccess().getNOTKeyword()); }
		'NOT'
		{ after(grammarAccess.getUnopAccess().getNOTKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormulaeAccess().getGroup_0()); }
		(rule__Formulae__Group_0__0)
		{ after(grammarAccess.getFormulaeAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFormulaeAccess().getGroup_1()); }
		(rule__Formulae__Group_1__0)
		{ after(grammarAccess.getFormulaeAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getFormulaeAccess().getAtomAssignment_2()); }
		(rule__Formulae__AtomAssignment_2)
		{ after(grammarAccess.getFormulaeAccess().getAtomAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binop__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinopAccess().getORKeyword_0()); }
		'OR'
		{ after(grammarAccess.getBinopAccess().getORKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinopAccess().getANDKeyword_1()); }
		'AND'
		{ after(grammarAccess.getBinopAccess().getANDKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getBinopAccess().getNANDKeyword_2()); }
		'NAND'
		{ after(grammarAccess.getBinopAccess().getNANDKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getBinopAccess().getIMPLIESKeyword_3()); }
		'IMPLIES'
		{ after(grammarAccess.getBinopAccess().getIMPLIESKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getBinopAccess().getBIIMPLIESKeyword_4()); }
		'BIIMPLIES'
		{ after(grammarAccess.getBinopAccess().getBIIMPLIESKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formulae__Group_0__0__Impl
	rule__Formulae__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaeAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getFormulaeAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formulae__Group_0__1__Impl
	rule__Formulae__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaeAccess().getForm_leftAssignment_0_1()); }
	(rule__Formulae__Form_leftAssignment_0_1)
	{ after(grammarAccess.getFormulaeAccess().getForm_leftAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formulae__Group_0__2__Impl
	rule__Formulae__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaeAccess().getBinopAssignment_0_2()); }
	(rule__Formulae__BinopAssignment_0_2)
	{ after(grammarAccess.getFormulaeAccess().getBinopAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formulae__Group_0__3__Impl
	rule__Formulae__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaeAccess().getForm_rightAssignment_0_3()); }
	(rule__Formulae__Form_rightAssignment_0_3)
	{ after(grammarAccess.getFormulaeAccess().getForm_rightAssignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formulae__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaeAccess().getRightParenthesisKeyword_0_4()); }
	')'
	{ after(grammarAccess.getFormulaeAccess().getRightParenthesisKeyword_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Formulae__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formulae__Group_1__0__Impl
	rule__Formulae__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaeAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getFormulaeAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formulae__Group_1__1__Impl
	rule__Formulae__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaeAccess().getUnopAssignment_1_1()); }
	(rule__Formulae__UnopAssignment_1_1)
	{ after(grammarAccess.getFormulaeAccess().getUnopAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formulae__Group_1__2__Impl
	rule__Formulae__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaeAccess().getFormAssignment_1_2()); }
	(rule__Formulae__FormAssignment_1_2)
	{ after(grammarAccess.getFormulaeAccess().getFormAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Formulae__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormulaeAccess().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getFormulaeAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Document__FormAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDocumentAccess().getFormFormulaeParserRuleCall_0()); }
		ruleFormulae
		{ after(grammarAccess.getDocumentAccess().getFormFormulaeParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Form_leftAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormulaeAccess().getForm_leftFormulaeParserRuleCall_0_1_0()); }
		ruleFormulae
		{ after(grammarAccess.getFormulaeAccess().getForm_leftFormulaeParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__BinopAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormulaeAccess().getBinopBinopParserRuleCall_0_2_0()); }
		ruleBinop
		{ after(grammarAccess.getFormulaeAccess().getBinopBinopParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__Form_rightAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormulaeAccess().getForm_rightFormulaeParserRuleCall_0_3_0()); }
		ruleFormulae
		{ after(grammarAccess.getFormulaeAccess().getForm_rightFormulaeParserRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__UnopAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormulaeAccess().getUnopUnopParserRuleCall_1_1_0()); }
		ruleUnop
		{ after(grammarAccess.getFormulaeAccess().getUnopUnopParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__FormAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormulaeAccess().getFormFormulaeParserRuleCall_1_2_0()); }
		ruleFormulae
		{ after(grammarAccess.getFormulaeAccess().getFormFormulaeParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Formulae__AtomAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormulaeAccess().getAtomAtomParserRuleCall_2_0()); }
		ruleAtom
		{ after(grammarAccess.getFormulaeAccess().getAtomAtomParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getAtomAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
