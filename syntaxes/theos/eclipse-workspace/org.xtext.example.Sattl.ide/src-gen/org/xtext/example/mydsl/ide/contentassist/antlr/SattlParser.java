/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalSattlParser;
import org.xtext.example.mydsl.services.SattlGrammarAccess;

public class SattlParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SattlGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SattlGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFormulaeAccess().getAlternatives(), "rule__Formulae__Alternatives");
			builder.put(grammarAccess.getBinopAccess().getAlternatives(), "rule__Binop__Alternatives");
			builder.put(grammarAccess.getFormulaeAccess().getGroup_0(), "rule__Formulae__Group_0__0");
			builder.put(grammarAccess.getFormulaeAccess().getGroup_1(), "rule__Formulae__Group_1__0");
			builder.put(grammarAccess.getDocumentAccess().getFormAssignment(), "rule__Document__FormAssignment");
			builder.put(grammarAccess.getFormulaeAccess().getForm_leftAssignment_0_1(), "rule__Formulae__Form_leftAssignment_0_1");
			builder.put(grammarAccess.getFormulaeAccess().getBinopAssignment_0_2(), "rule__Formulae__BinopAssignment_0_2");
			builder.put(grammarAccess.getFormulaeAccess().getForm_rightAssignment_0_3(), "rule__Formulae__Form_rightAssignment_0_3");
			builder.put(grammarAccess.getFormulaeAccess().getUnopAssignment_1_1(), "rule__Formulae__UnopAssignment_1_1");
			builder.put(grammarAccess.getFormulaeAccess().getFormAssignment_1_2(), "rule__Formulae__FormAssignment_1_2");
			builder.put(grammarAccess.getFormulaeAccess().getAtomAssignment_2(), "rule__Formulae__AtomAssignment_2");
			builder.put(grammarAccess.getAtomAccess().getNameAssignment(), "rule__Atom__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SattlGrammarAccess grammarAccess;

	@Override
	protected InternalSattlParser createParser() {
		InternalSattlParser result = new InternalSattlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SattlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SattlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
