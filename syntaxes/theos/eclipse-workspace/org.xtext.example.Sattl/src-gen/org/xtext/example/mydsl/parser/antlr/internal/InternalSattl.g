/*
 * generated by Xtext 2.19.0
 */
grammar InternalSattl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.SattlGrammarAccess;

}

@parser::members {

 	private SattlGrammarAccess grammarAccess;

    public InternalSattlParser(TokenStream input, SattlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Document";
   	}

   	@Override
   	protected SattlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDocument
entryRuleDocument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDocumentRule()); }
	iv_ruleDocument=ruleDocument
	{ $current=$iv_ruleDocument.current; }
	EOF;

// Rule Document
ruleDocument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDocumentAccess().getFormFormulaeParserRuleCall_0());
			}
			lv_Form_0_0=ruleFormulae
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDocumentRule());
				}
				add(
					$current,
					"Form",
					lv_Form_0_0,
					"org.xtext.example.mydsl.Sattl.Formulae");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleFormulae
entryRuleFormulae returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormulaeRule()); }
	iv_ruleFormulae=ruleFormulae
	{ $current=$iv_ruleFormulae.current; }
	EOF;

// Rule Formulae
ruleFormulae returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getFormulaeAccess().getLeftParenthesisKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaeAccess().getForm_leftFormulaeParserRuleCall_0_1_0());
					}
					lv_form_left_1_0=ruleFormulae
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaeRule());
						}
						add(
							$current,
							"form_left",
							lv_form_left_1_0,
							"org.xtext.example.mydsl.Sattl.Formulae");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaeAccess().getBinopBinopParserRuleCall_0_2_0());
					}
					lv_binop_2_0=ruleBinop
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaeRule());
						}
						add(
							$current,
							"binop",
							lv_binop_2_0,
							"org.xtext.example.mydsl.Sattl.Binop");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaeAccess().getForm_rightFormulaeParserRuleCall_0_3_0());
					}
					lv_form_right_3_0=ruleFormulae
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaeRule());
						}
						add(
							$current,
							"form_right",
							lv_form_right_3_0,
							"org.xtext.example.mydsl.Sattl.Formulae");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getFormulaeAccess().getRightParenthesisKeyword_0_4());
			}
		)
		    |
		(
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getFormulaeAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaeAccess().getUnopUnopParserRuleCall_1_1_0());
					}
					lv_unop_6_0=ruleUnop
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaeRule());
						}
						add(
							$current,
							"unop",
							lv_unop_6_0,
							"org.xtext.example.mydsl.Sattl.Unop");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaeAccess().getFormFormulaeParserRuleCall_1_2_0());
					}
					lv_form_7_0=ruleFormulae
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaeRule());
						}
						add(
							$current,
							"form",
							lv_form_7_0,
							"org.xtext.example.mydsl.Sattl.Formulae");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getFormulaeAccess().getRightParenthesisKeyword_1_3());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFormulaeAccess().getAtomAtomParserRuleCall_2_0());
				}
				lv_atom_9_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormulaeRule());
					}
					add(
						$current,
						"atom",
						lv_atom_9_0,
						"org.xtext.example.mydsl.Sattl.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	iv_ruleAtom=ruleAtom
	{ $current=$iv_ruleAtom.current; }
	EOF;

// Rule Atom
ruleAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getAtomAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAtomRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleBinop
entryRuleBinop returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBinopRule()); }
	iv_ruleBinop=ruleBinop
	{ $current=$iv_ruleBinop.current.getText(); }
	EOF;

// Rule Binop
ruleBinop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='OR'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopAccess().getORKeyword_0());
		}
		    |
		kw='AND'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopAccess().getANDKeyword_1());
		}
		    |
		kw='NAND'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopAccess().getNANDKeyword_2());
		}
		    |
		kw='IMPLIES'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopAccess().getIMPLIESKeyword_3());
		}
		    |
		kw='BIIMPLIES'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopAccess().getBIIMPLIESKeyword_4());
		}
	)
;

// Entry rule entryRuleUnop
entryRuleUnop returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnopRule()); }
	iv_ruleUnop=ruleUnop
	{ $current=$iv_ruleUnop.current.getText(); }
	EOF;

// Rule Unop
ruleUnop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='NOT'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getUnopAccess().getNOTKeyword());
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
