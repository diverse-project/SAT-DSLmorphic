/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SattlGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sattl.Document");
		private final Assignment cFormAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFormFormulaeParserRuleCall_0 = (RuleCall)cFormAssignment.eContents().get(0);
		
		//Document:
		//	Form+=Formulae*;
		@Override public ParserRule getRule() { return rule; }
		
		//Form+=Formulae*
		public Assignment getFormAssignment() { return cFormAssignment; }
		
		//Formulae
		public RuleCall getFormFormulaeParserRuleCall_0() { return cFormFormulaeParserRuleCall_0; }
	}
	public class FormulaeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sattl.Formulae");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cForm_leftAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cForm_leftFormulaeParserRuleCall_0_1_0 = (RuleCall)cForm_leftAssignment_0_1.eContents().get(0);
		private final Assignment cBinopAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cBinopBinopParserRuleCall_0_2_0 = (RuleCall)cBinopAssignment_0_2.eContents().get(0);
		private final Assignment cForm_rightAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cForm_rightFormulaeParserRuleCall_0_3_0 = (RuleCall)cForm_rightAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUnopAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnopUnopParserRuleCall_1_1_0 = (RuleCall)cUnopAssignment_1_1.eContents().get(0);
		private final Assignment cFormAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFormFormulaeParserRuleCall_1_2_0 = (RuleCall)cFormAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cAtomAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cAtomAtomParserRuleCall_2_0 = (RuleCall)cAtomAssignment_2.eContents().get(0);
		
		//Formulae:
		//	'(' form_left+=Formulae binop+=Binop form_right+=Formulae ')' | '(' unop+=Unop form+=Formulae ')' | atom+=Atom;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' form_left+=Formulae binop+=Binop form_right+=Formulae ')' | '(' unop+=Unop form+=Formulae ')' | atom+=Atom
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' form_left+=Formulae binop+=Binop form_right+=Formulae ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//form_left+=Formulae
		public Assignment getForm_leftAssignment_0_1() { return cForm_leftAssignment_0_1; }
		
		//Formulae
		public RuleCall getForm_leftFormulaeParserRuleCall_0_1_0() { return cForm_leftFormulaeParserRuleCall_0_1_0; }
		
		//binop+=Binop
		public Assignment getBinopAssignment_0_2() { return cBinopAssignment_0_2; }
		
		//Binop
		public RuleCall getBinopBinopParserRuleCall_0_2_0() { return cBinopBinopParserRuleCall_0_2_0; }
		
		//form_right+=Formulae
		public Assignment getForm_rightAssignment_0_3() { return cForm_rightAssignment_0_3; }
		
		//Formulae
		public RuleCall getForm_rightFormulaeParserRuleCall_0_3_0() { return cForm_rightFormulaeParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//'(' unop+=Unop form+=Formulae ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//unop+=Unop
		public Assignment getUnopAssignment_1_1() { return cUnopAssignment_1_1; }
		
		//Unop
		public RuleCall getUnopUnopParserRuleCall_1_1_0() { return cUnopUnopParserRuleCall_1_1_0; }
		
		//form+=Formulae
		public Assignment getFormAssignment_1_2() { return cFormAssignment_1_2; }
		
		//Formulae
		public RuleCall getFormFormulaeParserRuleCall_1_2_0() { return cFormFormulaeParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//atom+=Atom
		public Assignment getAtomAssignment_2() { return cAtomAssignment_2; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_2_0() { return cAtomAtomParserRuleCall_2_0; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sattl.Atom");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Atom:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class BinopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sattl.Binop");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cORKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cANDKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNANDKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cIMPLIESKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBIIMPLIESKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Binop:
		//	'OR' | 'AND' | 'NAND' | 'IMPLIES' | 'BIIMPLIES';
		@Override public ParserRule getRule() { return rule; }
		
		//'OR' | 'AND' | 'NAND' | 'IMPLIES' | 'BIIMPLIES'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'OR'
		public Keyword getORKeyword_0() { return cORKeyword_0; }
		
		//'AND'
		public Keyword getANDKeyword_1() { return cANDKeyword_1; }
		
		//'NAND'
		public Keyword getNANDKeyword_2() { return cNANDKeyword_2; }
		
		//'IMPLIES'
		public Keyword getIMPLIESKeyword_3() { return cIMPLIESKeyword_3; }
		
		//'BIIMPLIES'
		public Keyword getBIIMPLIESKeyword_4() { return cBIIMPLIESKeyword_4; }
	}
	public class UnopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Sattl.Unop");
		private final Keyword cNOTKeyword = (Keyword)rule.eContents().get(1);
		
		//Unop:
		//	'NOT';
		@Override public ParserRule getRule() { return rule; }
		
		//'NOT'
		public Keyword getNOTKeyword() { return cNOTKeyword; }
	}
	
	
	private final DocumentElements pDocument;
	private final FormulaeElements pFormulae;
	private final AtomElements pAtom;
	private final BinopElements pBinop;
	private final UnopElements pUnop;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SattlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDocument = new DocumentElements();
		this.pFormulae = new FormulaeElements();
		this.pAtom = new AtomElements();
		this.pBinop = new BinopElements();
		this.pUnop = new UnopElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Sattl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Document:
	//	Form+=Formulae*;
	public DocumentElements getDocumentAccess() {
		return pDocument;
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}
	
	//Formulae:
	//	'(' form_left+=Formulae binop+=Binop form_right+=Formulae ')' | '(' unop+=Unop form+=Formulae ')' | atom+=Atom;
	public FormulaeElements getFormulaeAccess() {
		return pFormulae;
	}
	
	public ParserRule getFormulaeRule() {
		return getFormulaeAccess().getRule();
	}
	
	//Atom:
	//	name=ID;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//Binop:
	//	'OR' | 'AND' | 'NAND' | 'IMPLIES' | 'BIIMPLIES';
	public BinopElements getBinopAccess() {
		return pBinop;
	}
	
	public ParserRule getBinopRule() {
		return getBinopAccess().getRule();
	}
	
	//Unop:
	//	'NOT';
	public UnopElements getUnopAccess() {
		return pUnop;
	}
	
	public ParserRule getUnopRule() {
		return getUnopAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
