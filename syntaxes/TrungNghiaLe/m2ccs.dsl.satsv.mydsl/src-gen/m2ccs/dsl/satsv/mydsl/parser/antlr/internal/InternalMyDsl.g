/*
 * generated by Xtext 2.19.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package m2ccs.dsl.satsv.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package m2ccs.dsl.satsv.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import m2ccs.dsl.satsv.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getFormulaFormulaParserRuleCall_0());
			}
			lv_formula_0_0=ruleFormula
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"formula",
					lv_formula_0_0,
					"m2ccs.dsl.satsv.mydsl.MyDsl.Formula");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleFormula
entryRuleFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormulaRule()); }
	iv_ruleFormula=ruleFormula
	{ $current=$iv_ruleFormula.current; }
	EOF;

// Rule Formula
ruleFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFormulaAccess().getVarVariableParserRuleCall_0_0());
				}
				lv_var_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormulaRule());
					}
					add(
						$current,
						"var",
						lv_var_0_0,
						"m2ccs.dsl.satsv.mydsl.MyDsl.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getFormulaAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaAccess().getOpUnOpParserRuleCall_1_1_0());
					}
					lv_op_2_0=ruleUnOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaRule());
						}
						add(
							$current,
							"op",
							lv_op_2_0,
							"m2ccs.dsl.satsv.mydsl.MyDsl.UnOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaAccess().getArgFormulaParserRuleCall_1_2_0());
					}
					lv_arg_3_0=ruleFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaRule());
						}
						add(
							$current,
							"arg",
							lv_arg_3_0,
							"m2ccs.dsl.satsv.mydsl.MyDsl.Formula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getFormulaAccess().getRightParenthesisKeyword_1_3());
			}
		)
		    |
		(
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getFormulaAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaAccess().getArg1FormulaParserRuleCall_2_1_0());
					}
					lv_arg1_6_0=ruleFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaRule());
						}
						add(
							$current,
							"arg1",
							lv_arg1_6_0,
							"m2ccs.dsl.satsv.mydsl.MyDsl.Formula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaAccess().getOpBiOpParserRuleCall_2_2_0());
					}
					lv_op_7_0=ruleBiOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaRule());
						}
						add(
							$current,
							"op",
							lv_op_7_0,
							"m2ccs.dsl.satsv.mydsl.MyDsl.BiOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaAccess().getArg2FormulaParserRuleCall_2_3_0());
					}
					lv_arg2_8_0=ruleFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaRule());
						}
						add(
							$current,
							"arg2",
							lv_arg2_8_0,
							"m2ccs.dsl.satsv.mydsl.MyDsl.Formula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getFormulaAccess().getRightParenthesisKeyword_2_4());
			}
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_id_0_0=RULE_ID
			{
				newLeafNode(lv_id_0_0, grammarAccess.getVariableAccess().getIdIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRule());
				}
				setWithLastConsumed(
					$current,
					"id",
					lv_id_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleUnOp
entryRuleUnOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnOpRule()); }
	iv_ruleUnOp=ruleUnOp
	{ $current=$iv_ruleUnOp.current; }
	EOF;

// Rule UnOp
ruleUnOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getUnOpAccess().getTypeUnOpTypeParserRuleCall_0());
			}
			lv_type_0_0=ruleUnOpType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getUnOpRule());
				}
				set(
					$current,
					"type",
					lv_type_0_0,
					"m2ccs.dsl.satsv.mydsl.MyDsl.UnOpType");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleUnOpType
entryRuleUnOpType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnOpTypeRule()); }
	iv_ruleUnOpType=ruleUnOpType
	{ $current=$iv_ruleUnOpType.current.getText(); }
	EOF;

// Rule UnOpType
ruleUnOpType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='!'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getUnOpTypeAccess().getExclamationMarkKeyword());
	}
;

// Entry rule entryRuleBiOp
entryRuleBiOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBiOpRule()); }
	iv_ruleBiOp=ruleBiOp
	{ $current=$iv_ruleBiOp.current; }
	EOF;

// Rule BiOp
ruleBiOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBiOpAccess().getTypeBiOpTypeParserRuleCall_0());
			}
			lv_type_0_0=ruleBiOpType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBiOpRule());
				}
				set(
					$current,
					"type",
					lv_type_0_0,
					"m2ccs.dsl.satsv.mydsl.MyDsl.BiOpType");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBiOpType
entryRuleBiOpType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBiOpTypeRule()); }
	iv_ruleBiOpType=ruleBiOpType
	{ $current=$iv_ruleBiOpType.current.getText(); }
	EOF;

// Rule BiOpType
ruleBiOpType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='&&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBiOpTypeAccess().getAmpersandAmpersandKeyword_0());
		}
		    |
		kw='||'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBiOpTypeAccess().getVerticalLineVerticalLineKeyword_1());
		}
		    |
		kw='->'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBiOpTypeAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		    |
		kw='<->'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBiOpTypeAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_3());
		}
		    |
		kw='!&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBiOpTypeAccess().getExclamationMarkAmpersandKeyword_4());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
