/*
 * generated by Xtext 2.19.0
 */
package m2ccs.dsl.satsv.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2ccs.dsl.satsv.mydsl.MyDsl.Model");
		private final Assignment cFormulaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFormulaFormulaParserRuleCall_0 = (RuleCall)cFormulaAssignment.eContents().get(0);
		
		//Model:
		//	formula+=Formula*;
		@Override public ParserRule getRule() { return rule; }
		
		//formula+=Formula*
		public Assignment getFormulaAssignment() { return cFormulaAssignment; }
		
		//Formula
		public RuleCall getFormulaFormulaParserRuleCall_0() { return cFormulaFormulaParserRuleCall_0; }
	}
	public class FormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2ccs.dsl.satsv.mydsl.MyDsl.Formula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVariableParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpUnOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cArgAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgFormulaParserRuleCall_1_2_0 = (RuleCall)cArgAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArg1Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArg1FormulaParserRuleCall_2_1_0 = (RuleCall)cArg1Assignment_2_1.eContents().get(0);
		private final Assignment cOpAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cOpBiOpParserRuleCall_2_2_0 = (RuleCall)cOpAssignment_2_2.eContents().get(0);
		private final Assignment cArg2Assignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cArg2FormulaParserRuleCall_2_3_0 = (RuleCall)cArg2Assignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//Formula:
		//	var+=Variable | "(" op+=UnOp arg+=Formula ")" | "(" arg1+=Formula op+=BiOp arg2+=Formula ")";
		@Override public ParserRule getRule() { return rule; }
		
		//var+=Variable | "(" op+=UnOp arg+=Formula ")" | "(" arg1+=Formula op+=BiOp arg2+=Formula ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var+=Variable
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_0_0() { return cVarVariableParserRuleCall_0_0; }
		
		//"(" op+=UnOp arg+=Formula ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//op+=UnOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//UnOp
		public RuleCall getOpUnOpParserRuleCall_1_1_0() { return cOpUnOpParserRuleCall_1_1_0; }
		
		//arg+=Formula
		public Assignment getArgAssignment_1_2() { return cArgAssignment_1_2; }
		
		//Formula
		public RuleCall getArgFormulaParserRuleCall_1_2_0() { return cArgFormulaParserRuleCall_1_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//"(" arg1+=Formula op+=BiOp arg2+=Formula ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//arg1+=Formula
		public Assignment getArg1Assignment_2_1() { return cArg1Assignment_2_1; }
		
		//Formula
		public RuleCall getArg1FormulaParserRuleCall_2_1_0() { return cArg1FormulaParserRuleCall_2_1_0; }
		
		//op+=BiOp
		public Assignment getOpAssignment_2_2() { return cOpAssignment_2_2; }
		
		//BiOp
		public RuleCall getOpBiOpParserRuleCall_2_2_0() { return cOpBiOpParserRuleCall_2_2_0; }
		
		//arg2+=Formula
		public Assignment getArg2Assignment_2_3() { return cArg2Assignment_2_3; }
		
		//Formula
		public RuleCall getArg2FormulaParserRuleCall_2_3_0() { return cArg2FormulaParserRuleCall_2_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2ccs.dsl.satsv.mydsl.MyDsl.Variable");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//Variable:
		//	id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}
	public class UnOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2ccs.dsl.satsv.mydsl.MyDsl.UnOp");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeUnOpTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//UnOp:
		//	type=UnOpType;
		@Override public ParserRule getRule() { return rule; }
		
		//type=UnOpType
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//UnOpType
		public RuleCall getTypeUnOpTypeParserRuleCall_0() { return cTypeUnOpTypeParserRuleCall_0; }
	}
	public class UnOpTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2ccs.dsl.satsv.mydsl.MyDsl.UnOpType");
		private final Keyword cExclamationMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//UnOpType:
		//	"!";
		@Override public ParserRule getRule() { return rule; }
		
		//"!"
		public Keyword getExclamationMarkKeyword() { return cExclamationMarkKeyword; }
	}
	public class BiOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2ccs.dsl.satsv.mydsl.MyDsl.BiOp");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeBiOpTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//BiOp:
		//	type=BiOpType;
		@Override public ParserRule getRule() { return rule; }
		
		//type=BiOpType
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//BiOpType
		public RuleCall getTypeBiOpTypeParserRuleCall_0() { return cTypeBiOpTypeParserRuleCall_0; }
	}
	public class BiOpTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m2ccs.dsl.satsv.mydsl.MyDsl.BiOpType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExclamationMarkAmpersandKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//BiOpType:
		//	"&&" | "||" | "->" | "<->" | "!&";
		@Override public ParserRule getRule() { return rule; }
		
		//"&&" | "||" | "->" | "<->" | "!&"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_0() { return cAmpersandAmpersandKeyword_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1() { return cVerticalLineVerticalLineKeyword_1; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//"<->"
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_3() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_3; }
		
		//"!&"
		public Keyword getExclamationMarkAmpersandKeyword_4() { return cExclamationMarkAmpersandKeyword_4; }
	}
	
	
	private final ModelElements pModel;
	private final FormulaElements pFormula;
	private final VariableElements pVariable;
	private final UnOpElements pUnOp;
	private final UnOpTypeElements pUnOpType;
	private final BiOpElements pBiOp;
	private final BiOpTypeElements pBiOpType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pFormula = new FormulaElements();
		this.pVariable = new VariableElements();
		this.pUnOp = new UnOpElements();
		this.pUnOpType = new UnOpTypeElements();
		this.pBiOp = new BiOpElements();
		this.pBiOpType = new BiOpTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("m2ccs.dsl.satsv.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	formula+=Formula*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Formula:
	//	var+=Variable | "(" op+=UnOp arg+=Formula ")" | "(" arg1+=Formula op+=BiOp arg2+=Formula ")";
	public FormulaElements getFormulaAccess() {
		return pFormula;
	}
	
	public ParserRule getFormulaRule() {
		return getFormulaAccess().getRule();
	}
	
	//Variable:
	//	id=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//UnOp:
	//	type=UnOpType;
	public UnOpElements getUnOpAccess() {
		return pUnOp;
	}
	
	public ParserRule getUnOpRule() {
		return getUnOpAccess().getRule();
	}
	
	//UnOpType:
	//	"!";
	public UnOpTypeElements getUnOpTypeAccess() {
		return pUnOpType;
	}
	
	public ParserRule getUnOpTypeRule() {
		return getUnOpTypeAccess().getRule();
	}
	
	//BiOp:
	//	type=BiOpType;
	public BiOpElements getBiOpAccess() {
		return pBiOp;
	}
	
	public ParserRule getBiOpRule() {
		return getBiOpAccess().getRule();
	}
	
	//BiOpType:
	//	"&&" | "||" | "->" | "<->" | "!&";
	public BiOpTypeElements getBiOpTypeAccess() {
		return pBiOpType;
	}
	
	public ParserRule getBiOpTypeRule() {
		return getBiOpTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
