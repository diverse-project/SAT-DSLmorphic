/*
 * generated by Xtext 2.19.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Expression";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getExprBinExprParserRuleCall_0_0());
				}
				lv_expr_0_0=ruleBinExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					add(
						$current,
						"expr",
						lv_expr_0_0,
						"org.xtext.example.mydsl.MyDsl.BinExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getUnExprParserRuleCall_1());
		}
		this_UnExpr_1=ruleUnExpr
		{
			$current = $this_UnExpr_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getLiteralParserRuleCall_2());
		}
		this_Literal_2=ruleLiteral
		{
			$current = $this_Literal_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBinExpr
entryRuleBinExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinExprRule()); }
	iv_ruleBinExpr=ruleBinExpr
	{ $current=$iv_ruleBinExpr.current; }
	EOF;

// Rule BinExpr
ruleBinExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getBinExprAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBinExprAccess().getLeftexprExpressionParserRuleCall_1_0());
				}
				lv_leftexpr_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinExprRule());
					}
					add(
						$current,
						"leftexpr",
						lv_leftexpr_1_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinExprAccess().getOpBinOpParserRuleCall_2_0());
				}
				lv_op_2_0=ruleBinOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinExprRule());
					}
					add(
						$current,
						"op",
						lv_op_2_0,
						"org.xtext.example.mydsl.MyDsl.BinOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinExprAccess().getRightexprExpressionParserRuleCall_3_0());
				}
				lv_rightexpr_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinExprRule());
					}
					add(
						$current,
						"rightexpr",
						lv_rightexpr_3_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getBinExprAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleBinOp
entryRuleBinOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBinOpRule()); }
	iv_ruleBinOp=ruleBinOp
	{ $current=$iv_ruleBinOp.current.getText(); }
	EOF;

// Rule BinOp
ruleBinOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='^'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getCircumflexAccentKeyword_0());
		}
		    |
		kw='v'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getVKeyword_1());
		}
		    |
		kw='->'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		    |
		kw='<->'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_3());
		}
		    |
		kw='|'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getVerticalLineKeyword_4());
		}
	)
;

// Entry rule entryRuleUnExpr
entryRuleUnExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnExprRule()); }
	iv_ruleUnExpr=ruleUnExpr
	{ $current=$iv_ruleUnExpr.current; }
	EOF;

// Rule UnExpr
ruleUnExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getUnExprAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnExprAccess().getOpUnOpParserRuleCall_1_0());
				}
				lv_op_1_0=ruleUnOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnExprRule());
					}
					add(
						$current,
						"op",
						lv_op_1_0,
						"org.xtext.example.mydsl.MyDsl.UnOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnExprAccess().getExprExpressionParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnExprRule());
					}
					add(
						$current,
						"expr",
						lv_expr_2_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getUnExprAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleUnOp
entryRuleUnOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnOpRule()); }
	iv_ruleUnOp=ruleUnOp
	{ $current=$iv_ruleUnOp.current.getText(); }
	EOF;

// Rule UnOp
ruleUnOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='!'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getUnOpAccess().getExclamationMarkKeyword());
	}
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralAccess().getLit_atomAtomParserRuleCall_0_0());
				}
				lv_lit_atom_0_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralRule());
					}
					add(
						$current,
						"lit_atom",
						lv_lit_atom_0_0,
						"org.xtext.example.mydsl.MyDsl.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralAccess().getLit_constConstParserRuleCall_1_0());
				}
				lv_lit_const_1_0=ruleConst
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralRule());
					}
					set(
						$current,
						"lit_const",
						lv_lit_const_1_0,
						"org.xtext.example.mydsl.MyDsl.Const");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	iv_ruleAtom=ruleAtom
	{ $current=$iv_ruleAtom.current; }
	EOF;

// Rule Atom
ruleAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getAtomAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAtomRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleConst
entryRuleConst returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConstRule()); }
	iv_ruleConst=ruleConst
	{ $current=$iv_ruleConst.current.getText(); }
	EOF;

// Rule Const
ruleConst returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='#t'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConstAccess().getTKeyword_0());
		}
		    |
		kw='#f'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConstAccess().getFKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
