/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExprBinExprParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final RuleCall cUnExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expression:
		//	expr+=BinExpr | UnExpr | Literal;
		@Override public ParserRule getRule() { return rule; }
		
		//expr+=BinExpr | UnExpr | Literal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expr+=BinExpr
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//BinExpr
		public RuleCall getExprBinExprParserRuleCall_0_0() { return cExprBinExprParserRuleCall_0_0; }
		
		//UnExpr
		public RuleCall getUnExprParserRuleCall_1() { return cUnExprParserRuleCall_1; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_2() { return cLiteralParserRuleCall_2; }
	}
	public class BinExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BinExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftexprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftexprExpressionParserRuleCall_1_0 = (RuleCall)cLeftexprAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpBinOpParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cRightexprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightexprExpressionParserRuleCall_3_0 = (RuleCall)cRightexprAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BinExpr:
		//	'(' leftexpr+=Expression op+=BinOp rightexpr+=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' leftexpr+=Expression op+=BinOp rightexpr+=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//leftexpr+=Expression
		public Assignment getLeftexprAssignment_1() { return cLeftexprAssignment_1; }
		
		//Expression
		public RuleCall getLeftexprExpressionParserRuleCall_1_0() { return cLeftexprExpressionParserRuleCall_1_0; }
		
		//op+=BinOp
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//BinOp
		public RuleCall getOpBinOpParserRuleCall_2_0() { return cOpBinOpParserRuleCall_2_0; }
		
		//rightexpr+=Expression
		public Assignment getRightexprAssignment_3() { return cRightexprAssignment_3; }
		
		//Expression
		public RuleCall getRightexprExpressionParserRuleCall_3_0() { return cRightexprExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class BinOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BinOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cVerticalLineKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//BinOp:
		//	'^' | 'v' | "->" | "<->" | "|";
		@Override public ParserRule getRule() { return rule; }
		
		//'^' | 'v' | "->" | "<->" | "|"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_0() { return cCircumflexAccentKeyword_0; }
		
		//'v'
		public Keyword getVKeyword_1() { return cVKeyword_1; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//"<->"
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_3() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_3; }
		
		//"|"
		public Keyword getVerticalLineKeyword_4() { return cVerticalLineKeyword_4; }
	}
	public class UnExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UnExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpUnOpParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UnExpr:
		//	'(' op+=UnOp expr+=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' op+=UnOp expr+=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//op+=UnOp
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//UnOp
		public RuleCall getOpUnOpParserRuleCall_1_0() { return cOpUnOpParserRuleCall_1_0; }
		
		//expr+=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class UnOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UnOp");
		private final Keyword cExclamationMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//UnOp:
		//	'!';
		@Override public ParserRule getRule() { return rule; }
		
		//'!'
		public Keyword getExclamationMarkKeyword() { return cExclamationMarkKeyword; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLit_atomAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLit_atomAtomParserRuleCall_0_0 = (RuleCall)cLit_atomAssignment_0.eContents().get(0);
		private final Assignment cLit_constAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLit_constConstParserRuleCall_1_0 = (RuleCall)cLit_constAssignment_1.eContents().get(0);
		
		//Literal:
		//	lit_atom+=Atom | lit_const=Const;
		@Override public ParserRule getRule() { return rule; }
		
		//lit_atom+=Atom | lit_const=Const
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//lit_atom+=Atom
		public Assignment getLit_atomAssignment_0() { return cLit_atomAssignment_0; }
		
		//Atom
		public RuleCall getLit_atomAtomParserRuleCall_0_0() { return cLit_atomAtomParserRuleCall_0_0; }
		
		//lit_const=Const
		public Assignment getLit_constAssignment_1() { return cLit_constAssignment_1; }
		
		//Const
		public RuleCall getLit_constConstParserRuleCall_1_0() { return cLit_constConstParserRuleCall_1_0; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Atom");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Atom:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Const");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Const:
		//	'#t' | '#f';
		@Override public ParserRule getRule() { return rule; }
		
		//'#t' | '#f'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'#t'
		public Keyword getTKeyword_0() { return cTKeyword_0; }
		
		//'#f'
		public Keyword getFKeyword_1() { return cFKeyword_1; }
	}
	
	
	private final ExpressionElements pExpression;
	private final BinExprElements pBinExpr;
	private final BinOpElements pBinOp;
	private final UnExprElements pUnExpr;
	private final UnOpElements pUnOp;
	private final LiteralElements pLiteral;
	private final AtomElements pAtom;
	private final ConstElements pConst;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pExpression = new ExpressionElements();
		this.pBinExpr = new BinExprElements();
		this.pBinOp = new BinOpElements();
		this.pUnExpr = new UnExprElements();
		this.pUnOp = new UnOpElements();
		this.pLiteral = new LiteralElements();
		this.pAtom = new AtomElements();
		this.pConst = new ConstElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Expression:
	//	expr+=BinExpr | UnExpr | Literal;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//BinExpr:
	//	'(' leftexpr+=Expression op+=BinOp rightexpr+=Expression ')';
	public BinExprElements getBinExprAccess() {
		return pBinExpr;
	}
	
	public ParserRule getBinExprRule() {
		return getBinExprAccess().getRule();
	}
	
	//BinOp:
	//	'^' | 'v' | "->" | "<->" | "|";
	public BinOpElements getBinOpAccess() {
		return pBinOp;
	}
	
	public ParserRule getBinOpRule() {
		return getBinOpAccess().getRule();
	}
	
	//UnExpr:
	//	'(' op+=UnOp expr+=Expression ')';
	public UnExprElements getUnExprAccess() {
		return pUnExpr;
	}
	
	public ParserRule getUnExprRule() {
		return getUnExprAccess().getRule();
	}
	
	//UnOp:
	//	'!';
	public UnOpElements getUnOpAccess() {
		return pUnOp;
	}
	
	public ParserRule getUnOpRule() {
		return getUnOpAccess().getRule();
	}
	
	//Literal:
	//	lit_atom+=Atom | lit_const=Const;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//Atom:
	//	name=ID;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//Const:
	//	'#t' | '#f';
	public ConstElements getConstAccess() {
		return pConst;
	}
	
	public ParserRule getConstRule() {
		return getConstAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
