/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.Atom;
import org.xtext.example.mydsl.myDsl.Literal;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Literal</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.LiteralImpl#getLit_atom <em>Lit atom</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.LiteralImpl#getLit_const <em>Lit const</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LiteralImpl extends ExpressionImpl implements Literal
{
  /**
   * The cached value of the '{@link #getLit_atom() <em>Lit atom</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLit_atom()
   * @generated
   * @ordered
   */
  protected EList<Atom> lit_atom;

  /**
   * The default value of the '{@link #getLit_const() <em>Lit const</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLit_const()
   * @generated
   * @ordered
   */
  protected static final String LIT_CONST_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLit_const() <em>Lit const</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLit_const()
   * @generated
   * @ordered
   */
  protected String lit_const = LIT_CONST_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LiteralImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.LITERAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Atom> getLit_atom()
  {
    if (lit_atom == null)
    {
      lit_atom = new EObjectContainmentEList<Atom>(Atom.class, this, MyDslPackage.LITERAL__LIT_ATOM);
    }
    return lit_atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLit_const()
  {
    return lit_const;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLit_const(String newLit_const)
  {
    String oldLit_const = lit_const;
    lit_const = newLit_const;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.LITERAL__LIT_CONST, oldLit_const, lit_const));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.LITERAL__LIT_ATOM:
        return ((InternalEList<?>)getLit_atom()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.LITERAL__LIT_ATOM:
        return getLit_atom();
      case MyDslPackage.LITERAL__LIT_CONST:
        return getLit_const();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.LITERAL__LIT_ATOM:
        getLit_atom().clear();
        getLit_atom().addAll((Collection<? extends Atom>)newValue);
        return;
      case MyDslPackage.LITERAL__LIT_CONST:
        setLit_const((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.LITERAL__LIT_ATOM:
        getLit_atom().clear();
        return;
      case MyDslPackage.LITERAL__LIT_CONST:
        setLit_const(LIT_CONST_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.LITERAL__LIT_ATOM:
        return lit_atom != null && !lit_atom.isEmpty();
      case MyDslPackage.LITERAL__LIT_CONST:
        return LIT_CONST_EDEFAULT == null ? lit_const != null : !LIT_CONST_EDEFAULT.equals(lit_const);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (lit_const: ");
    result.append(lit_const);
    result.append(')');
    return result.toString();
  }

} //LiteralImpl
