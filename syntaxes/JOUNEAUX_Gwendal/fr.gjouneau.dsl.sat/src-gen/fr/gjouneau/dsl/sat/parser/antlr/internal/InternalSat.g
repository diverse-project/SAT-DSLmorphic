/*
 * generated by Xtext 2.19.0
 */
grammar InternalSat;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.gjouneau.dsl.sat.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.gjouneau.dsl.sat.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.gjouneau.dsl.sat.services.SatGrammarAccess;

}

@parser::members {

 	private SatGrammarAccess grammarAccess;

    public InternalSatParser(TokenStream input, SatGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ModelSAT";
   	}

   	@Override
   	protected SatGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModelSAT
entryRuleModelSAT returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelSATRule()); }
	iv_ruleModelSAT=ruleModelSAT
	{ $current=$iv_ruleModelSAT.current; }
	EOF;

// Rule ModelSAT
ruleModelSAT returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getModelSATAccess().getModelSATAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModelSATAccess().getExpressionExpressionParserRuleCall_1_0_0());
					}
					lv_expression_1_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelSATRule());
						}
						add(
							$current,
							"expression",
							lv_expression_1_0,
							"fr.gjouneau.dsl.sat.Sat.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=';'
				{
					newLeafNode(otherlv_2, grammarAccess.getModelSATAccess().getSemicolonKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getModelSATAccess().getExpressionExpressionParserRuleCall_1_1_1_0());
						}
						lv_expression_3_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getModelSATRule());
							}
							add(
								$current,
								"expression",
								lv_expression_3_0,
								"fr.gjouneau.dsl.sat.Sat.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getEquivParserRuleCall());
	}
	this_Equiv_0=ruleEquiv
	{
		$current = $this_Equiv_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleEquiv
entryRuleEquiv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEquivRule()); }
	iv_ruleEquiv=ruleEquiv
	{ $current=$iv_ruleEquiv.current; }
	EOF;

// Rule Equiv
ruleEquiv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEquivAccess().getImpliesParserRuleCall_0());
		}
		this_Implies_0=ruleImplies
		{
			$current = $this_Implies_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEquivAccess().getEquivLhsAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='EQUIV'
				{
					newLeafNode(otherlv_2, grammarAccess.getEquivAccess().getEQUIVKeyword_1_1_0());
				}
				    |
				otherlv_3='<=>'
				{
					newLeafNode(otherlv_3, grammarAccess.getEquivAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEquivAccess().getRhsImpliesParserRuleCall_1_2_0());
					}
					lv_rhs_4_0=ruleImplies
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEquivRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_4_0,
							"fr.gjouneau.dsl.sat.Sat.Implies");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleImplies
entryRuleImplies returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImpliesRule()); }
	iv_ruleImplies=ruleImplies
	{ $current=$iv_ruleImplies.current; }
	EOF;

// Rule Implies
ruleImplies returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getImpliesAccess().getOrParserRuleCall_0());
		}
		this_Or_0=ruleOr
		{
			$current = $this_Or_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getImpliesAccess().getImpliesLhsAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='IMPLIES'
				{
					newLeafNode(otherlv_2, grammarAccess.getImpliesAccess().getIMPLIESKeyword_1_1_0());
				}
				    |
				otherlv_3='->'
				{
					newLeafNode(otherlv_3, grammarAccess.getImpliesAccess().getHyphenMinusGreaterThanSignKeyword_1_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getImpliesAccess().getRhsOrParserRuleCall_1_2_0());
					}
					lv_rhs_4_0=ruleOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImpliesRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_4_0,
							"fr.gjouneau.dsl.sat.Sat.Or");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLhsAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='OR'
				{
					newLeafNode(otherlv_2, grammarAccess.getOrAccess().getORKeyword_1_1_0());
				}
				    |
				otherlv_3='||'
				{
					newLeafNode(otherlv_3, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRhsAndParserRuleCall_1_2_0());
					}
					lv_rhs_4_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_4_0,
							"fr.gjouneau.dsl.sat.Sat.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getNandParserRuleCall_0());
		}
		this_Nand_0=ruleNand
		{
			$current = $this_Nand_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLhsAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='AND'
				{
					newLeafNode(otherlv_2, grammarAccess.getAndAccess().getANDKeyword_1_1_0());
				}
				    |
				otherlv_3='&&'
				{
					newLeafNode(otherlv_3, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRhsNandParserRuleCall_1_2_0());
					}
					lv_rhs_4_0=ruleNand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_4_0,
							"fr.gjouneau.dsl.sat.Sat.Nand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNand
entryRuleNand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNandRule()); }
	iv_ruleNand=ruleNand
	{ $current=$iv_ruleNand.current; }
	EOF;

// Rule Nand
ruleNand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNandAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getNandAccess().getNandLhsAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='NAND'
				{
					newLeafNode(otherlv_2, grammarAccess.getNandAccess().getNANDKeyword_1_1_0());
				}
				    |
				otherlv_3='!&'
				{
					newLeafNode(otherlv_3, grammarAccess.getNandAccess().getExclamationMarkAmpersandKeyword_1_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNandAccess().getRhsPrimaryParserRuleCall_1_2_0());
					}
					lv_rhs_4_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNandRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_4_0,
							"fr.gjouneau.dsl.sat.Sat.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getNotAction_1_0(),
						$current);
				}
			)
			(
				otherlv_4='!'
				{
					newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1_0());
				}
				    |
				otherlv_5='NOT'
				{
					newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getNOTKeyword_1_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0());
					}
					lv_expression_6_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_6_0,
							"fr.gjouneau.dsl.sat.Sat.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2());
		}
		this_Atomic_7=ruleAtomic
		{
			$current = $this_Atomic_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	iv_ruleAtomic=ruleAtomic
	{ $current=$iv_ruleAtomic.current; }
	EOF;

// Rule Atomic
ruleAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAtomicAccess().getVariableAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAtomicAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomicRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
