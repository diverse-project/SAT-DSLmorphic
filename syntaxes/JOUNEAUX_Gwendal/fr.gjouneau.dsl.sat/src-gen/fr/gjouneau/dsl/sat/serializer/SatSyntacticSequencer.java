/*
 * generated by Xtext 2.19.0
 */
package fr.gjouneau.dsl.sat.serializer;

import com.google.inject.Inject;
import fr.gjouneau.dsl.sat.services.SatGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class SatSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SatGrammarAccess grammarAccess;
	protected AbstractElementAlias match_And_ANDKeyword_1_1_0_or_AmpersandAmpersandKeyword_1_1_1;
	protected AbstractElementAlias match_Equiv_EQUIVKeyword_1_1_0_or_LessThanSignEqualsSignGreaterThanSignKeyword_1_1_1;
	protected AbstractElementAlias match_Implies_HyphenMinusGreaterThanSignKeyword_1_1_1_or_IMPLIESKeyword_1_1_0;
	protected AbstractElementAlias match_Nand_ExclamationMarkAmpersandKeyword_1_1_1_or_NANDKeyword_1_1_0;
	protected AbstractElementAlias match_Or_ORKeyword_1_1_0_or_VerticalLineVerticalLineKeyword_1_1_1;
	protected AbstractElementAlias match_Primary_ExclamationMarkKeyword_1_1_0_or_NOTKeyword_1_1_1;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_0_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SatGrammarAccess) access;
		match_And_ANDKeyword_1_1_0_or_AmpersandAmpersandKeyword_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAndAccess().getANDKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1_1()));
		match_Equiv_EQUIVKeyword_1_1_0_or_LessThanSignEqualsSignGreaterThanSignKeyword_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getEquivAccess().getEQUIVKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getEquivAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_1_1()));
		match_Implies_HyphenMinusGreaterThanSignKeyword_1_1_1_or_IMPLIESKeyword_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getImpliesAccess().getHyphenMinusGreaterThanSignKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getImpliesAccess().getIMPLIESKeyword_1_1_0()));
		match_Nand_ExclamationMarkAmpersandKeyword_1_1_1_or_NANDKeyword_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getNandAccess().getExclamationMarkAmpersandKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getNandAccess().getNANDKeyword_1_1_0()));
		match_Or_ORKeyword_1_1_0_or_VerticalLineVerticalLineKeyword_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getOrAccess().getORKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1_1()));
		match_Primary_ExclamationMarkKeyword_1_1_0_or_NOTKeyword_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getNOTKeyword_1_1_1()));
		match_Primary_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
		match_Primary_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_And_ANDKeyword_1_1_0_or_AmpersandAmpersandKeyword_1_1_1.equals(syntax))
				emit_And_ANDKeyword_1_1_0_or_AmpersandAmpersandKeyword_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Equiv_EQUIVKeyword_1_1_0_or_LessThanSignEqualsSignGreaterThanSignKeyword_1_1_1.equals(syntax))
				emit_Equiv_EQUIVKeyword_1_1_0_or_LessThanSignEqualsSignGreaterThanSignKeyword_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Implies_HyphenMinusGreaterThanSignKeyword_1_1_1_or_IMPLIESKeyword_1_1_0.equals(syntax))
				emit_Implies_HyphenMinusGreaterThanSignKeyword_1_1_1_or_IMPLIESKeyword_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Nand_ExclamationMarkAmpersandKeyword_1_1_1_or_NANDKeyword_1_1_0.equals(syntax))
				emit_Nand_ExclamationMarkAmpersandKeyword_1_1_1_or_NANDKeyword_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Or_ORKeyword_1_1_0_or_VerticalLineVerticalLineKeyword_1_1_1.equals(syntax))
				emit_Or_ORKeyword_1_1_0_or_VerticalLineVerticalLineKeyword_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_ExclamationMarkKeyword_1_1_0_or_NOTKeyword_1_1_1.equals(syntax))
				emit_Primary_ExclamationMarkKeyword_1_1_0_or_NOTKeyword_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'AND' | '&&'
	 *
	 * This ambiguous syntax occurs at:
	 *     {And.lhs=} (ambiguity) rhs=Nand
	 */
	protected void emit_And_ANDKeyword_1_1_0_or_AmpersandAmpersandKeyword_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'EQUIV' | '<=>'
	 *
	 * This ambiguous syntax occurs at:
	 *     {Equiv.lhs=} (ambiguity) rhs=Implies
	 */
	protected void emit_Equiv_EQUIVKeyword_1_1_0_or_LessThanSignEqualsSignGreaterThanSignKeyword_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'IMPLIES' | '->'
	 *
	 * This ambiguous syntax occurs at:
	 *     {Implies.lhs=} (ambiguity) rhs=Or
	 */
	protected void emit_Implies_HyphenMinusGreaterThanSignKeyword_1_1_1_or_IMPLIESKeyword_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'NAND' | '!&'
	 *
	 * This ambiguous syntax occurs at:
	 *     {Nand.lhs=} (ambiguity) rhs=Primary
	 */
	protected void emit_Nand_ExclamationMarkAmpersandKeyword_1_1_1_or_NANDKeyword_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'OR' | '||'
	 *
	 * This ambiguous syntax occurs at:
	 *     {Or.lhs=} (ambiguity) rhs=And
	 */
	protected void emit_Or_ORKeyword_1_1_0_or_VerticalLineVerticalLineKeyword_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '!' | 'NOT'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) expression=Primary
	 */
	protected void emit_Primary_ExclamationMarkKeyword_1_1_0_or_NOTKeyword_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ('!' | 'NOT') expression=Primary
	 *     (rule start) (ambiguity) name=ID
	 *     (rule start) (ambiguity) {And.lhs=}
	 *     (rule start) (ambiguity) {Equiv.lhs=}
	 *     (rule start) (ambiguity) {Implies.lhs=}
	 *     (rule start) (ambiguity) {Nand.lhs=}
	 *     (rule start) (ambiguity) {Or.lhs=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {And.lhs=}
	 *     (rule start) (ambiguity) {Equiv.lhs=}
	 *     (rule start) (ambiguity) {Implies.lhs=}
	 *     (rule start) (ambiguity) {Nand.lhs=}
	 *     (rule start) (ambiguity) {Or.lhs=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
