/*
 * generated by Xtext 2.19.0
 */
grammar InternalSat;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.gjouneau.dsl.sat.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.gjouneau.dsl.sat.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.gjouneau.dsl.sat.services.SatGrammarAccess;

}
@parser::members {
	private SatGrammarAccess grammarAccess;

	public void setGrammarAccess(SatGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModelSAT
entryRuleModelSAT
:
{ before(grammarAccess.getModelSATRule()); }
	 ruleModelSAT
{ after(grammarAccess.getModelSATRule()); } 
	 EOF 
;

// Rule ModelSAT
ruleModelSAT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelSATAccess().getGroup()); }
		(rule__ModelSAT__Group__0)
		{ after(grammarAccess.getModelSATAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getEquivParserRuleCall()); }
		ruleEquiv
		{ after(grammarAccess.getExpressionAccess().getEquivParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEquiv
entryRuleEquiv
:
{ before(grammarAccess.getEquivRule()); }
	 ruleEquiv
{ after(grammarAccess.getEquivRule()); } 
	 EOF 
;

// Rule Equiv
ruleEquiv 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEquivAccess().getGroup()); }
		(rule__Equiv__Group__0)
		{ after(grammarAccess.getEquivAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImplies
entryRuleImplies
:
{ before(grammarAccess.getImpliesRule()); }
	 ruleImplies
{ after(grammarAccess.getImpliesRule()); } 
	 EOF 
;

// Rule Implies
ruleImplies 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImpliesAccess().getGroup()); }
		(rule__Implies__Group__0)
		{ after(grammarAccess.getImpliesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNand
entryRuleNand
:
{ before(grammarAccess.getNandRule()); }
	 ruleNand
{ after(grammarAccess.getNandRule()); } 
	 EOF 
;

// Rule Nand
ruleNand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNandAccess().getGroup()); }
		(rule__Nand__Group__0)
		{ after(grammarAccess.getNandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomic
entryRuleAtomic
:
{ before(grammarAccess.getAtomicRule()); }
	 ruleAtomic
{ after(grammarAccess.getAtomicRule()); } 
	 EOF 
;

// Rule Atomic
ruleAtomic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicAccess().getGroup()); }
		(rule__Atomic__Group__0)
		{ after(grammarAccess.getAtomicAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equiv__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquivAccess().getEQUIVKeyword_1_1_0()); }
		'EQUIV'
		{ after(grammarAccess.getEquivAccess().getEQUIVKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getEquivAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_1_1()); }
		'<=>'
		{ after(grammarAccess.getEquivAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImpliesAccess().getIMPLIESKeyword_1_1_0()); }
		'IMPLIES'
		{ after(grammarAccess.getImpliesAccess().getIMPLIESKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getImpliesAccess().getHyphenMinusGreaterThanSignKeyword_1_1_1()); }
		'->'
		{ after(grammarAccess.getImpliesAccess().getHyphenMinusGreaterThanSignKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getORKeyword_1_1_0()); }
		'OR'
		{ after(grammarAccess.getOrAccess().getORKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1_1()); }
		'||'
		{ after(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getANDKeyword_1_1_0()); }
		'AND'
		{ after(grammarAccess.getAndAccess().getANDKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1_1()); }
		'&&'
		{ after(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNandAccess().getNANDKeyword_1_1_0()); }
		'NAND'
		{ after(grammarAccess.getNandAccess().getNANDKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getNandAccess().getExclamationMarkAmpersandKeyword_1_1_1()); }
		'!&'
		{ after(grammarAccess.getNandAccess().getExclamationMarkAmpersandKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_0()); }
		(rule__Primary__Group_0__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
		(rule__Primary__Group_1__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2()); }
		ruleAtomic
		{ after(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1_0()); }
		'!'
		{ after(grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getNOTKeyword_1_1_1()); }
		'NOT'
		{ after(grammarAccess.getPrimaryAccess().getNOTKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSAT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModelSAT__Group__0__Impl
	rule__ModelSAT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSAT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelSATAccess().getModelSATAction_0()); }
	()
	{ after(grammarAccess.getModelSATAccess().getModelSATAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSAT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModelSAT__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSAT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelSATAccess().getGroup_1()); }
	(rule__ModelSAT__Group_1__0)?
	{ after(grammarAccess.getModelSATAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModelSAT__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModelSAT__Group_1__0__Impl
	rule__ModelSAT__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSAT__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelSATAccess().getExpressionAssignment_1_0()); }
	(rule__ModelSAT__ExpressionAssignment_1_0)
	{ after(grammarAccess.getModelSATAccess().getExpressionAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSAT__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModelSAT__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSAT__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelSATAccess().getGroup_1_1()); }
	(rule__ModelSAT__Group_1_1__0)*
	{ after(grammarAccess.getModelSATAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModelSAT__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModelSAT__Group_1_1__0__Impl
	rule__ModelSAT__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSAT__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelSATAccess().getSemicolonKeyword_1_1_0()); }
	';'
	{ after(grammarAccess.getModelSATAccess().getSemicolonKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSAT__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModelSAT__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSAT__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelSATAccess().getExpressionAssignment_1_1_1()); }
	(rule__ModelSAT__ExpressionAssignment_1_1_1)
	{ after(grammarAccess.getModelSATAccess().getExpressionAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equiv__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equiv__Group__0__Impl
	rule__Equiv__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equiv__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquivAccess().getImpliesParserRuleCall_0()); }
	ruleImplies
	{ after(grammarAccess.getEquivAccess().getImpliesParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equiv__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equiv__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equiv__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquivAccess().getGroup_1()); }
	(rule__Equiv__Group_1__0)*
	{ after(grammarAccess.getEquivAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equiv__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equiv__Group_1__0__Impl
	rule__Equiv__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equiv__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquivAccess().getEquivLhsAction_1_0()); }
	()
	{ after(grammarAccess.getEquivAccess().getEquivLhsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equiv__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equiv__Group_1__1__Impl
	rule__Equiv__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equiv__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquivAccess().getAlternatives_1_1()); }
	(rule__Equiv__Alternatives_1_1)
	{ after(grammarAccess.getEquivAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equiv__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equiv__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equiv__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquivAccess().getRhsAssignment_1_2()); }
	(rule__Equiv__RhsAssignment_1_2)
	{ after(grammarAccess.getEquivAccess().getRhsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Implies__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implies__Group__0__Impl
	rule__Implies__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesAccess().getOrParserRuleCall_0()); }
	ruleOr
	{ after(grammarAccess.getImpliesAccess().getOrParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implies__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesAccess().getGroup_1()); }
	(rule__Implies__Group_1__0)*
	{ after(grammarAccess.getImpliesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Implies__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implies__Group_1__0__Impl
	rule__Implies__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesAccess().getImpliesLhsAction_1_0()); }
	()
	{ after(grammarAccess.getImpliesAccess().getImpliesLhsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implies__Group_1__1__Impl
	rule__Implies__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesAccess().getAlternatives_1_1()); }
	(rule__Implies__Alternatives_1_1)
	{ after(grammarAccess.getImpliesAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Implies__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImpliesAccess().getRhsAssignment_1_2()); }
	(rule__Implies__RhsAssignment_1_2)
	{ after(grammarAccess.getImpliesAccess().getRhsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
	{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getGroup_1()); }
	(rule__Or__Group_1__0)*
	{ after(grammarAccess.getOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrLhsAction_1_0()); }
	()
	{ after(grammarAccess.getOrAccess().getOrLhsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getAlternatives_1_1()); }
	(rule__Or__Alternatives_1_1)
	{ after(grammarAccess.getOrAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getRhsAssignment_1_2()); }
	(rule__Or__RhsAssignment_1_2)
	{ after(grammarAccess.getOrAccess().getRhsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getNandParserRuleCall_0()); }
	ruleNand
	{ after(grammarAccess.getAndAccess().getNandParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)*
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndLhsAction_1_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndLhsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAlternatives_1_1()); }
	(rule__And__Alternatives_1_1)
	{ after(grammarAccess.getAndAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRhsAssignment_1_2()); }
	(rule__And__RhsAssignment_1_2)
	{ after(grammarAccess.getAndAccess().getRhsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Nand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nand__Group__0__Impl
	rule__Nand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNandAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getNandAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNandAccess().getGroup_1()); }
	(rule__Nand__Group_1__0)*
	{ after(grammarAccess.getNandAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Nand__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nand__Group_1__0__Impl
	rule__Nand__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNandAccess().getNandLhsAction_1_0()); }
	()
	{ after(grammarAccess.getNandAccess().getNandLhsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nand__Group_1__1__Impl
	rule__Nand__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNandAccess().getAlternatives_1_1()); }
	(rule__Nand__Alternatives_1_1)
	{ after(grammarAccess.getNandAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nand__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNandAccess().getRhsAssignment_1_2()); }
	(rule__Nand__RhsAssignment_1_2)
	{ after(grammarAccess.getNandAccess().getRhsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__0__Impl
	rule__Primary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__1__Impl
	rule__Primary__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getNotAction_1_0()); }
	()
	{ after(grammarAccess.getPrimaryAccess().getNotAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getAlternatives_1_1()); }
	(rule__Primary__Alternatives_1_1)
	{ after(grammarAccess.getPrimaryAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2()); }
	(rule__Primary__ExpressionAssignment_1_2)
	{ after(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group__0__Impl
	rule__Atomic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getVariableAction_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getVariableAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getNameAssignment_1()); }
	(rule__Atomic__NameAssignment_1)
	{ after(grammarAccess.getAtomicAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModelSAT__ExpressionAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelSATAccess().getExpressionExpressionParserRuleCall_1_0_0()); }
		ruleExpression
		{ after(grammarAccess.getModelSATAccess().getExpressionExpressionParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSAT__ExpressionAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelSATAccess().getExpressionExpressionParserRuleCall_1_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getModelSATAccess().getExpressionExpressionParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equiv__RhsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquivAccess().getRhsImpliesParserRuleCall_1_2_0()); }
		ruleImplies
		{ after(grammarAccess.getEquivAccess().getRhsImpliesParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Implies__RhsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImpliesAccess().getRhsOrParserRuleCall_1_2_0()); }
		ruleOr
		{ after(grammarAccess.getImpliesAccess().getRhsOrParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RhsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getRhsAndParserRuleCall_1_2_0()); }
		ruleAnd
		{ after(grammarAccess.getOrAccess().getRhsAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__RhsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getRhsNandParserRuleCall_1_2_0()); }
		ruleNand
		{ after(grammarAccess.getAndAccess().getRhsNandParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nand__RhsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNandAccess().getRhsPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getNandAccess().getRhsPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ExpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAtomicAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
