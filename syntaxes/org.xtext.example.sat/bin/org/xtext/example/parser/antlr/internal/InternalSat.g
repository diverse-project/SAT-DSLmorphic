/*
 * generated by Xtext 2.14.0
 */
grammar InternalSat;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.services.SatGrammarAccess;

}

@parser::members {

 	private SatGrammarAccess grammarAccess;

    public InternalSatParser(TokenStream input, SatGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "File";
   	}

   	@Override
   	protected SatGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	iv_ruleFile=ruleFile
	{ $current=$iv_ruleFile.current; }
	EOF;

// Rule File
ruleFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFileAccess().getFileFormulaParserRuleCall_0());
			}
			lv_file_0_0=ruleFormula
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFileRule());
				}
				add(
					$current,
					"file",
					lv_file_0_0,
					"org.xtext.example.Sat.Formula");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleFormula
entryRuleFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormulaRule()); }
	iv_ruleFormula=ruleFormula
	{ $current=$iv_ruleFormula.current; }
	EOF;

// Rule Formula
ruleFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFormulaAccess().getFormulaAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFormulaAccess().getFormExprParserRuleCall_1_0_0());
					}
					lv_form_1_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormulaRule());
						}
						set(
							$current,
							"form",
							lv_form_1_0,
							"org.xtext.example.Sat.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			{
				newCompositeNode(grammarAccess.getFormulaAccess().getVoidParserRuleCall_1_1());
			}
			ruleVoid
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	iv_ruleExpr=ruleExpr
	{ $current=$iv_ruleExpr.current; }
	EOF;

// Rule Expr
ruleExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExprAccess().getExprBinParserRuleCall_0());
		}
		this_ExprBin_0=ruleExprBin
		{
			$current = $this_ExprBin_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExprAccess().getExprUnParserRuleCall_1());
		}
		this_ExprUn_1=ruleExprUn
		{
			$current = $this_ExprUn_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExprAccess().getVarParserRuleCall_2());
		}
		this_Var_2=ruleVar
		{
			$current = $this_Var_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExprBin
entryRuleExprBin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprBinRule()); }
	iv_ruleExprBin=ruleExprBin
	{ $current=$iv_ruleExprBin.current; }
	EOF;

// Rule ExprBin
ruleExprBin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getExprBinAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExprBinAccess().getExprLExprParserRuleCall_1_0());
				}
				lv_exprL_1_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprBinRule());
					}
					set(
						$current,
						"exprL",
						lv_exprL_1_0,
						"org.xtext.example.Sat.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExprBinAccess().getOpBinOpParserRuleCall_2_0());
				}
				lv_op_2_0=ruleBinOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprBinRule());
					}
					set(
						$current,
						"op",
						lv_op_2_0,
						"org.xtext.example.Sat.BinOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExprBinAccess().getExprRExprParserRuleCall_3_0());
				}
				lv_exprR_3_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprBinRule());
					}
					set(
						$current,
						"exprR",
						lv_exprR_3_0,
						"org.xtext.example.Sat.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getExprBinAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleExprUn
entryRuleExprUn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprUnRule()); }
	iv_ruleExprUn=ruleExprUn
	{ $current=$iv_ruleExprUn.current; }
	EOF;

// Rule ExprUn
ruleExprUn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getExprUnAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExprUnAccess().getOpUnOpParserRuleCall_1_0());
				}
				lv_op_1_0=ruleUnOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprUnRule());
					}
					set(
						$current,
						"op",
						lv_op_1_0,
						"org.xtext.example.Sat.UnOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExprUnAccess().getExprExprParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprUnRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"org.xtext.example.Sat.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getExprUnAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleBinOp
entryRuleBinOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBinOpRule()); }
	iv_ruleBinOp=ruleBinOp
	{ $current=$iv_ruleBinOp.current.getText(); }
	EOF;

// Rule BinOp
ruleBinOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='AND'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getANDKeyword_0());
		}
		    |
		kw='OR'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getORKeyword_1());
		}
		    |
		kw='IMPLIES'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getIMPLIESKeyword_2());
		}
		    |
		kw='BIIMPLIES'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getBIIMPLIESKeyword_3());
		}
		    |
		kw='EXCLUDES'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getEXCLUDESKeyword_4());
		}
	)
;

// Entry rule entryRuleUnOp
entryRuleUnOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnOpRule()); }
	iv_ruleUnOp=ruleUnOp
	{ $current=$iv_ruleUnOp.current.getText(); }
	EOF;

// Rule UnOp
ruleUnOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='NOT'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getUnOpAccess().getNOTKeyword());
	}
;

// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	iv_ruleVar=ruleVar
	{ $current=$iv_ruleVar.current; }
	EOF;

// Rule Var
ruleVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarAccess().getAtomAtomParserRuleCall_0_0());
				}
				lv_atom_0_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarRule());
					}
					set(
						$current,
						"atom",
						lv_atom_0_0,
						"org.xtext.example.Sat.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getVarAccess().getValValParserRuleCall_1_0());
				}
				lv_val_1_0=ruleVal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarRule());
					}
					set(
						$current,
						"val",
						lv_val_1_0,
						"org.xtext.example.Sat.Val");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	iv_ruleAtom=ruleAtom
	{ $current=$iv_ruleAtom.current; }
	EOF;

// Rule Atom
ruleAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getAtomAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAtomRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleVal
entryRuleVal returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValRule()); }
	iv_ruleVal=ruleVal
	{ $current=$iv_ruleVal.current.getText(); }
	EOF;

// Rule Val
ruleVal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='TRUE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getValAccess().getTRUEKeyword_0());
		}
		    |
		kw='FALSE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getValAccess().getFALSEKeyword_1());
		}
	)
;

// Entry rule entryRuleVoid
entryRuleVoid returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVoidRule()); }
	iv_ruleVoid=ruleVoid
	{ $current=$iv_ruleVoid.current.getText(); }
	EOF;

// Rule Void
ruleVoid returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='\u00F8'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getVoidAccess().getLatinSmallLetterOWithStrokeKeyword());
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
