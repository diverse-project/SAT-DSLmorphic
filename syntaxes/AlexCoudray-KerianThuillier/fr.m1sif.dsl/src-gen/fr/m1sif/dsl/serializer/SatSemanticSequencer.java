/*
 * generated by Xtext 2.19.0
 */
package fr.m1sif.dsl.serializer;

import com.google.inject.Inject;
import fr.m1sif.dsl.sat.Atom;
import fr.m1sif.dsl.sat.Binop;
import fr.m1sif.dsl.sat.Expressions;
import fr.m1sif.dsl.sat.SatPackage;
import fr.m1sif.dsl.sat.Unop;
import fr.m1sif.dsl.services.SatGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SatSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SatGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SatPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SatPackage.ATOM:
				sequence_Atom(context, (Atom) semanticObject); 
				return; 
			case SatPackage.BINOP:
				sequence_Binop(context, (Binop) semanticObject); 
				return; 
			case SatPackage.EXPRESSIONS:
				sequence_Expressions(context, (Expressions) semanticObject); 
				return; 
			case SatPackage.UNOP:
				sequence_Unop(context, (Unop) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns Atom
	 *     Atom returns Atom
	 *
	 * Constraint:
	 *     Id=ID
	 */
	protected void sequence_Atom(ISerializationContext context, Atom semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SatPackage.Literals.ATOM__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SatPackage.Literals.ATOM__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomAccess().getIdIDTerminalRuleCall_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Binop
	 *     Binop returns Binop
	 *
	 * Constraint:
	 *     (LeftParam=Expression op=BinopType RightParam=Expression)
	 */
	protected void sequence_Binop(ISerializationContext context, Binop semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SatPackage.Literals.BINOP__LEFT_PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SatPackage.Literals.BINOP__LEFT_PARAM));
			if (transientValues.isValueTransient(semanticObject, SatPackage.Literals.BINOP__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SatPackage.Literals.BINOP__OP));
			if (transientValues.isValueTransient(semanticObject, SatPackage.Literals.BINOP__RIGHT_PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SatPackage.Literals.BINOP__RIGHT_PARAM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBinopAccess().getLeftParamExpressionParserRuleCall_1_0(), semanticObject.getLeftParam());
		feeder.accept(grammarAccess.getBinopAccess().getOpBinopTypeParserRuleCall_2_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getBinopAccess().getRightParamExpressionParserRuleCall_3_0(), semanticObject.getRightParam());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expressions returns Expressions
	 *
	 * Constraint:
	 *     Exprs+=Expression+
	 */
	protected void sequence_Expressions(ISerializationContext context, Expressions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Unop
	 *     Unop returns Unop
	 *
	 * Constraint:
	 *     (op=UnopType Param=Expression)
	 */
	protected void sequence_Unop(ISerializationContext context, Unop semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SatPackage.Literals.UNOP__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SatPackage.Literals.UNOP__OP));
			if (transientValues.isValueTransient(semanticObject, SatPackage.Literals.UNOP__PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SatPackage.Literals.UNOP__PARAM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnopAccess().getOpUnopTypeParserRuleCall_0_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getUnopAccess().getParamExpressionParserRuleCall_1_0(), semanticObject.getParam());
		feeder.finish();
	}
	
	
}
