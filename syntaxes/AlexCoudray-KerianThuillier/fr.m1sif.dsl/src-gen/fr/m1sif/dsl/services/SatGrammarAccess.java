/*
 * generated by Xtext 2.19.0
 */
package fr.m1sif.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SatGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ExpressionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.m1sif.dsl.Sat.Expressions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprsExpressionParserRuleCall_0_0 = (RuleCall)cExprsAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Expressions:
		//	(Exprs+=Expression ";")*;
		@Override public ParserRule getRule() { return rule; }
		
		//(Exprs+=Expression ";")*
		public Group getGroup() { return cGroup; }
		
		//Exprs+=Expression
		public Assignment getExprsAssignment_0() { return cExprsAssignment_0; }
		
		//Expression
		public RuleCall getExprsExpressionParserRuleCall_0_0() { return cExprsExpressionParserRuleCall_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.m1sif.dsl.Sat.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBinopParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expression:
		//	Atom | Unop | Binop;
		@Override public ParserRule getRule() { return rule; }
		
		//Atom | Unop | Binop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Atom
		public RuleCall getAtomParserRuleCall_0() { return cAtomParserRuleCall_0; }
		
		//Unop
		public RuleCall getUnopParserRuleCall_1() { return cUnopParserRuleCall_1; }
		
		//Binop
		public RuleCall getBinopParserRuleCall_2() { return cBinopParserRuleCall_2; }
	}
	public class UnopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.m1sif.dsl.Sat.Unop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpUnopTypeParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamExpressionParserRuleCall_1_0 = (RuleCall)cParamAssignment_1.eContents().get(0);
		
		//Unop:
		//	op=UnopType Param=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//op=UnopType Param=Expression
		public Group getGroup() { return cGroup; }
		
		//op=UnopType
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//UnopType
		public RuleCall getOpUnopTypeParserRuleCall_0_0() { return cOpUnopTypeParserRuleCall_0_0; }
		
		//Param=Expression
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }
		
		//Expression
		public RuleCall getParamExpressionParserRuleCall_1_0() { return cParamExpressionParserRuleCall_1_0; }
	}
	public class BinopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.m1sif.dsl.Sat.Binop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftParamExpressionParserRuleCall_1_0 = (RuleCall)cLeftParamAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpBinopTypeParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cRightParamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightParamExpressionParserRuleCall_3_0 = (RuleCall)cRightParamAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Binop:
		//	"(" LeftParam=Expression op=BinopType RightParam=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" LeftParam=Expression op=BinopType RightParam=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//LeftParam=Expression
		public Assignment getLeftParamAssignment_1() { return cLeftParamAssignment_1; }
		
		//Expression
		public RuleCall getLeftParamExpressionParserRuleCall_1_0() { return cLeftParamExpressionParserRuleCall_1_0; }
		
		//op=BinopType
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//BinopType
		public RuleCall getOpBinopTypeParserRuleCall_2_0() { return cOpBinopTypeParserRuleCall_2_0; }
		
		//RightParam=Expression
		public Assignment getRightParamAssignment_3() { return cRightParamAssignment_3; }
		
		//Expression
		public RuleCall getRightParamExpressionParserRuleCall_3_0() { return cRightParamExpressionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.m1sif.dsl.Sat.Atom");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//Atom:
		//	Id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//Id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}
	public class UnopTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.m1sif.dsl.Sat.UnopType");
		private final Keyword cExclamationMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//UnopType:
		//	"!";
		@Override public ParserRule getRule() { return rule; }
		
		//"!"
		public Keyword getExclamationMarkKeyword() { return cExclamationMarkKeyword; }
	}
	public class BinopTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.m1sif.dsl.Sat.BinopType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkAmpersandKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//BinopType:
		//	"&&" |
		//	"||" |
		//	"!&" |
		//	"==>" |
		//	"<=>";
		@Override public ParserRule getRule() { return rule; }
		
		//"&&" | "||" | "!&" | "==>" | "<=>"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_0() { return cAmpersandAmpersandKeyword_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1() { return cVerticalLineVerticalLineKeyword_1; }
		
		//"!&"
		public Keyword getExclamationMarkAmpersandKeyword_2() { return cExclamationMarkAmpersandKeyword_2; }
		
		//"==>"
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignEqualsSignGreaterThanSignKeyword_3; }
		
		//"<=>"
		public Keyword getLessThanSignEqualsSignGreaterThanSignKeyword_4() { return cLessThanSignEqualsSignGreaterThanSignKeyword_4; }
	}
	
	
	private final ExpressionsElements pExpressions;
	private final ExpressionElements pExpression;
	private final UnopElements pUnop;
	private final BinopElements pBinop;
	private final AtomElements pAtom;
	private final UnopTypeElements pUnopType;
	private final BinopTypeElements pBinopType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SatGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pExpressions = new ExpressionsElements();
		this.pExpression = new ExpressionElements();
		this.pUnop = new UnopElements();
		this.pBinop = new BinopElements();
		this.pAtom = new AtomElements();
		this.pUnopType = new UnopTypeElements();
		this.pBinopType = new BinopTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.m1sif.dsl.Sat".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Expressions:
	//	(Exprs+=Expression ";")*;
	public ExpressionsElements getExpressionsAccess() {
		return pExpressions;
	}
	
	public ParserRule getExpressionsRule() {
		return getExpressionsAccess().getRule();
	}
	
	//Expression:
	//	Atom | Unop | Binop;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Unop:
	//	op=UnopType Param=Expression;
	public UnopElements getUnopAccess() {
		return pUnop;
	}
	
	public ParserRule getUnopRule() {
		return getUnopAccess().getRule();
	}
	
	//Binop:
	//	"(" LeftParam=Expression op=BinopType RightParam=Expression ")";
	public BinopElements getBinopAccess() {
		return pBinop;
	}
	
	public ParserRule getBinopRule() {
		return getBinopAccess().getRule();
	}
	
	//Atom:
	//	Id=ID;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//UnopType:
	//	"!";
	public UnopTypeElements getUnopTypeAccess() {
		return pUnopType;
	}
	
	public ParserRule getUnopTypeRule() {
		return getUnopTypeAccess().getRule();
	}
	
	//BinopType:
	//	"&&" |
	//	"||" |
	//	"!&" |
	//	"==>" |
	//	"<=>";
	public BinopTypeElements getBinopTypeAccess() {
		return pBinopType;
	}
	
	public ParserRule getBinopTypeRule() {
		return getBinopTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
