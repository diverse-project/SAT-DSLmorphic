/*
 * generated by Xtext 2.19.0
 */
grammar InternalSat;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.m1sif.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.m1sif.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.m1sif.dsl.services.SatGrammarAccess;

}

@parser::members {

 	private SatGrammarAccess grammarAccess;

    public InternalSatParser(TokenStream input, SatGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Expressions";
   	}

   	@Override
   	protected SatGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleExpressions
entryRuleExpressions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionsRule()); }
	iv_ruleExpressions=ruleExpressions
	{ $current=$iv_ruleExpressions.current; }
	EOF;

// Rule Expressions
ruleExpressions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionsAccess().getExprsExpressionParserRuleCall_0_0());
				}
				lv_Exprs_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionsRule());
					}
					add(
						$current,
						"Exprs",
						lv_Exprs_0_0,
						"fr.m1sif.dsl.Sat.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getExpressionsAccess().getSemicolonKeyword_1());
		}
	)*
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getAtomParserRuleCall_0());
		}
		this_Atom_0=ruleAtom
		{
			$current = $this_Atom_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getUnopParserRuleCall_1());
		}
		this_Unop_1=ruleUnop
		{
			$current = $this_Unop_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBinopParserRuleCall_2());
		}
		this_Binop_2=ruleBinop
		{
			$current = $this_Binop_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUnop
entryRuleUnop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnopRule()); }
	iv_ruleUnop=ruleUnop
	{ $current=$iv_ruleUnop.current; }
	EOF;

// Rule Unop
ruleUnop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnopAccess().getOpUnopTypeParserRuleCall_0_0());
				}
				lv_op_0_0=ruleUnopType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnopRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"fr.m1sif.dsl.Sat.UnopType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnopAccess().getParamExpressionParserRuleCall_1_0());
				}
				lv_Param_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnopRule());
					}
					set(
						$current,
						"Param",
						lv_Param_1_0,
						"fr.m1sif.dsl.Sat.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBinop
entryRuleBinop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinopRule()); }
	iv_ruleBinop=ruleBinop
	{ $current=$iv_ruleBinop.current; }
	EOF;

// Rule Binop
ruleBinop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getBinopAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBinopAccess().getLeftParamExpressionParserRuleCall_1_0());
				}
				lv_LeftParam_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinopRule());
					}
					set(
						$current,
						"LeftParam",
						lv_LeftParam_1_0,
						"fr.m1sif.dsl.Sat.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinopAccess().getOpBinopTypeParserRuleCall_2_0());
				}
				lv_op_2_0=ruleBinopType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinopRule());
					}
					set(
						$current,
						"op",
						lv_op_2_0,
						"fr.m1sif.dsl.Sat.BinopType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinopAccess().getRightParamExpressionParserRuleCall_3_0());
				}
				lv_RightParam_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinopRule());
					}
					set(
						$current,
						"RightParam",
						lv_RightParam_3_0,
						"fr.m1sif.dsl.Sat.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getBinopAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	iv_ruleAtom=ruleAtom
	{ $current=$iv_ruleAtom.current; }
	EOF;

// Rule Atom
ruleAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_Id_0_0=RULE_ID
			{
				newLeafNode(lv_Id_0_0, grammarAccess.getAtomAccess().getIdIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAtomRule());
				}
				setWithLastConsumed(
					$current,
					"Id",
					lv_Id_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleUnopType
entryRuleUnopType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnopTypeRule()); }
	iv_ruleUnopType=ruleUnopType
	{ $current=$iv_ruleUnopType.current.getText(); }
	EOF;

// Rule UnopType
ruleUnopType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='!'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getUnopTypeAccess().getExclamationMarkKeyword());
	}
;

// Entry rule entryRuleBinopType
entryRuleBinopType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBinopTypeRule()); }
	iv_ruleBinopType=ruleBinopType
	{ $current=$iv_ruleBinopType.current.getText(); }
	EOF;

// Rule BinopType
ruleBinopType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='&&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopTypeAccess().getAmpersandAmpersandKeyword_0());
		}
		    |
		kw='||'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopTypeAccess().getVerticalLineVerticalLineKeyword_1());
		}
		    |
		kw='!&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopTypeAccess().getExclamationMarkAmpersandKeyword_2());
		}
		    |
		kw='==>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopTypeAccess().getEqualsSignEqualsSignGreaterThanSignKeyword_3());
		}
		    |
		kw='<=>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopTypeAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_4());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
